/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/organizations/{parent_lookup_organization_id}/domains/": {
    get: operations["domains_list"];
    post: operations["domains_create"];
  };
  "/api/organizations/{parent_lookup_organization_id}/domains/{id}/": {
    get: operations["domains_retrieve"];
    put: operations["domains_update"];
    delete: operations["domains_destroy"];
    patch: operations["domains_partial_update"];
  };
  "/api/organizations/{parent_lookup_organization_id}/domains/{id}/verify/": {
    post: operations["domains_verify_create"];
  };
  "/api/organizations/{parent_lookup_organization_id}/invites/": {
    get: operations["invites_list"];
    post: operations["invites_create"];
  };
  "/api/organizations/{parent_lookup_organization_id}/invites/{id}/": {
    delete: operations["invites_destroy"];
  };
  "/api/organizations/{parent_lookup_organization_id}/invites/bulk/": {
    post: operations["invites_bulk_create"];
  };
  "/api/organizations/{parent_lookup_organization_id}/members/": {
    get: operations["members_list"];
  };
  "/api/organizations/{parent_lookup_organization_id}/members/{user__uuid}/": {
    put: operations["members_update"];
    delete: operations["members_destroy"];
    patch: operations["members_partial_update"];
  };
  "/api/organizations/{parent_lookup_organization_id}/plugins/": {
    get: operations["plugins_list"];
    post: operations["plugins_create"];
  };
  "/api/organizations/{parent_lookup_organization_id}/plugins/{id}/": {
    get: operations["plugins_retrieve"];
    put: operations["plugins_update"];
    delete: operations["plugins_destroy"];
    patch: operations["plugins_partial_update"];
  };
  "/api/organizations/{parent_lookup_organization_id}/plugins/{id}/check_for_updates/": {
    get: operations["plugins_check_for_updates_retrieve"];
  };
  "/api/organizations/{parent_lookup_organization_id}/plugins/{id}/source/": {
    get: operations["plugins_source_retrieve"];
  };
  "/api/organizations/{parent_lookup_organization_id}/plugins/{id}/update_source/": {
    patch: operations["plugins_update_source_partial_update"];
  };
  "/api/organizations/{parent_lookup_organization_id}/plugins/{id}/upgrade/": {
    post: operations["plugins_upgrade_create"];
  };
  "/api/organizations/{parent_lookup_organization_id}/plugins/activity/": {
    get: operations["plugins_activity_retrieve"];
  };
  "/api/organizations/{parent_lookup_organization_id}/plugins/repository/": {
    get: operations["plugins_repository_retrieve"];
  };
  "/api/projects/": {
    /** Projects for the current organization. */
    get: operations["list"];
    /** Projects for the current organization. */
    post: operations["create"];
  };
  "/api/projects/{id}/": {
    /** Projects for the current organization. */
    get: operations["retrieve"];
    /** Projects for the current organization. */
    put: operations["update"];
    /** Projects for the current organization. */
    delete: operations["destroy"];
    /** Projects for the current organization. */
    patch: operations["partial_update"];
  };
  "/api/projects/{id}/reset_token/": {
    /** Projects for the current organization. */
    patch: operations["reset_token_partial_update"];
  };
  "/api/projects/{project_id}/actions/": {
    get: operations["actions_list"];
    post: operations["actions_create"];
  };
  "/api/projects/{project_id}/actions/{id}/": {
    get: operations["actions_retrieve"];
    put: operations["actions_update"];
    /** Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["actions_destroy"];
    patch: operations["actions_partial_update"];
  };
  "/api/projects/{project_id}/actions/{id}/count/": {
    get: operations["actions_count_retrieve"];
  };
  "/api/projects/{project_id}/actions/people/": {
    get: operations["actions_people_retrieve"];
  };
  "/api/projects/{project_id}/activity_log/bookmark_activity_notification/": {
    post: operations["activity_log_bookmark_activity_notification_create"];
  };
  "/api/projects/{project_id}/activity_log/important_changes/": {
    get: operations["activity_log_important_changes_retrieve"];
  };
  "/api/projects/{project_id}/annotations/": {
    /** Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
    get: operations["annotations_list"];
    /** Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
    post: operations["annotations_create"];
  };
  "/api/projects/{project_id}/annotations/{id}/": {
    /** Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
    get: operations["annotations_retrieve"];
    /** Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
    put: operations["annotations_update"];
    /** Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["annotations_destroy"];
    /** Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
    patch: operations["annotations_partial_update"];
  };
  "/api/projects/{project_id}/app_metrics/{parent_lookup_plugin_config_id}/historical_exports/": {
    get: operations["app_metrics_historical_exports_retrieve"];
  };
  "/api/projects/{project_id}/app_metrics/{parent_lookup_plugin_config_id}/historical_exports/{id}/": {
    get: operations["app_metrics_historical_exports_retrieve_2"];
  };
  "/api/projects/{project_id}/app_metrics/{id}/": {
    get: operations["app_metrics_retrieve"];
  };
  "/api/projects/{project_id}/app_metrics/{id}/error_details/": {
    get: operations["app_metrics_error_details_retrieve"];
  };
  "/api/projects/{project_id}/cohorts/": {
    get: operations["cohorts_list"];
    post: operations["cohorts_create"];
  };
  "/api/projects/{project_id}/cohorts/{id}/": {
    get: operations["cohorts_retrieve"];
    put: operations["cohorts_update"];
    /** Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["cohorts_destroy"];
    patch: operations["cohorts_partial_update"];
  };
  "/api/projects/{project_id}/cohorts/{id}/persons/": {
    get: operations["cohorts_persons_retrieve"];
  };
  "/api/projects/{project_id}/dashboards/": {
    get: operations["dashboards_list"];
    post: operations["dashboards_create"];
  };
  "/api/projects/{project_id}/dashboards/{id}/": {
    get: operations["dashboards_retrieve"];
    put: operations["dashboards_update"];
    /** Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["dashboards_destroy"];
    patch: operations["dashboards_partial_update"];
  };
  "/api/projects/{project_id}/dashboards/{id}/move_tile/": {
    patch: operations["dashboards_move_tile_partial_update"];
  };
  "/api/projects/{project_id}/event_definitions/": {
    get: operations["event_definitions_list"];
  };
  "/api/projects/{project_id}/event_definitions/{id}/": {
    get: operations["event_definitions_retrieve"];
    put: operations["event_definitions_update"];
    patch: operations["event_definitions_partial_update"];
  };
  "/api/projects/{project_id}/events/": {
    get: operations["events_list"];
  };
  "/api/projects/{project_id}/events/{id}/": {
    get: operations["events_retrieve"];
  };
  "/api/projects/{project_id}/events/values/": {
    get: operations["events_values_retrieve"];
  };
  "/api/projects/{project_id}/experiments/": {
    get: operations["experiments_list"];
    post: operations["experiments_create"];
  };
  "/api/projects/{project_id}/experiments/{id}/": {
    get: operations["experiments_retrieve"];
    put: operations["experiments_update"];
    delete: operations["experiments_destroy"];
    patch: operations["experiments_partial_update"];
  };
  "/api/projects/{project_id}/experiments/{id}/results/": {
    get: operations["experiments_results_retrieve"];
  };
  "/api/projects/{project_id}/experiments/{id}/secondary_results/": {
    get: operations["experiments_secondary_results_retrieve"];
  };
  "/api/projects/{project_id}/experiments/requires_flag_implementation/": {
    get: operations["experiments_requires_flag_implementation_retrieve"];
  };
  "/api/projects/{project_id}/exports/": {
    post: operations["exports_create"];
  };
  "/api/projects/{project_id}/exports/{id}/": {
    get: operations["exports_retrieve"];
  };
  "/api/projects/{project_id}/exports/{id}/content/": {
    get: operations["exports_content_retrieve"];
  };
  "/api/projects/{project_id}/feature_flags/": {
    /**
     * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    get: operations["feature_flags_list"];
    /**
     * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    post: operations["feature_flags_create"];
  };
  "/api/projects/{project_id}/feature_flags/{id}/": {
    /**
     * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    get: operations["feature_flags_retrieve"];
    /**
     * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    put: operations["feature_flags_update"];
    /** Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["feature_flags_destroy"];
    /**
     * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    patch: operations["feature_flags_partial_update"];
  };
  "/api/projects/{project_id}/feature_flags/{id}/activity/": {
    /**
     * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    get: operations["feature_flags_activity_retrieve_2"];
  };
  "/api/projects/{project_id}/feature_flags/activity/": {
    /**
     * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    get: operations["feature_flags_activity_retrieve"];
  };
  "/api/projects/{project_id}/feature_flags/evaluation_reasons/": {
    /**
     * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    get: operations["feature_flags_evaluation_reasons_retrieve"];
  };
  "/api/projects/{project_id}/feature_flags/local_evaluation/": {
    /**
     * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    get: operations["feature_flags_local_evaluation_retrieve"];
  };
  "/api/projects/{project_id}/feature_flags/my_flags/": {
    /**
     * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
     *
     * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
     */
    get: operations["feature_flags_my_flags_retrieve"];
  };
  "/api/projects/{project_id}/groups/": {
    get: operations["groups_list"];
  };
  "/api/projects/{project_id}/groups/find/": {
    get: operations["groups_find_retrieve"];
  };
  "/api/projects/{project_id}/groups/property_definitions/": {
    get: operations["groups_property_definitions_retrieve"];
  };
  "/api/projects/{project_id}/groups/property_values/": {
    get: operations["groups_property_values_retrieve"];
  };
  "/api/projects/{project_id}/groups/related/": {
    get: operations["groups_related_retrieve"];
  };
  "/api/projects/{project_id}/groups_types/": {
    get: operations["groups_types_list"];
  };
  "/api/projects/{project_id}/groups_types/update_metadata/": {
    patch: operations["groups_types_update_metadata_partial_update"];
  };
  "/api/projects/{project_id}/hooks/": {
    /** Retrieve, create, update or destroy REST hooks. */
    get: operations["hooks_list"];
    /** Retrieve, create, update or destroy REST hooks. */
    post: operations["hooks_create"];
  };
  "/api/projects/{project_id}/hooks/{id}/": {
    /** Retrieve, create, update or destroy REST hooks. */
    get: operations["hooks_retrieve"];
    /** Retrieve, create, update or destroy REST hooks. */
    put: operations["hooks_update"];
    /** Retrieve, create, update or destroy REST hooks. */
    delete: operations["hooks_destroy"];
    /** Retrieve, create, update or destroy REST hooks. */
    patch: operations["hooks_partial_update"];
  };
  "/api/projects/{project_id}/ingestion_warnings/": {
    get: operations["ingestion_warnings_retrieve"];
  };
  "/api/projects/{project_id}/insights/": {
    get: operations["insights_list"];
    post: operations["insights_create"];
  };
  "/api/projects/{project_id}/insights/{id}/": {
    /**
     * When loading an insight for a dashboard pass a `from_dashboard` query parameter containing the dashboard ID
     *
     * e.g. `"/api/projects/{team_id}/insights/{insight_id}?from_dashboard={dashboard_id}"`
     *
     * Insights can be added to more than one dashboard, this allows the insight to be loaded in the correct context.
     *
     * Using the correct cache and enriching the response with dashboard specific config (e.g. layouts or colors)
     *
     * To improve UI responsiveness if there is not already a result cached the insight is returned without a result.
     * This allows the UI to render and then request the result separately.
     *
     * To ensure the result is calculated and returned include a `refresh=true` query parameter.
     */
    get: operations["insights_retrieve"];
    put: operations["insights_update"];
    /** Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["insights_destroy"];
    patch: operations["insights_partial_update"];
  };
  "/api/projects/{project_id}/insights/{id}/activity/": {
    get: operations["insights_activity_retrieve_2"];
  };
  "/api/projects/{project_id}/insights/{id}/viewed/": {
    post: operations["insights_viewed_create"];
  };
  "/api/projects/{project_id}/insights/activity/": {
    get: operations["insights_activity_retrieve"];
  };
  "/api/projects/{project_id}/insights/cancel/": {
    post: operations["insights_cancel_create"];
  };
  "/api/projects/{project_id}/insights/funnel/": {
    get: operations["insights_funnel_retrieve"];
    post: operations["Funnels"];
  };
  "/api/projects/{project_id}/insights/funnel/correlation/": {
    get: operations["insights_funnel_correlation_retrieve"];
    post: operations["insights_funnel_correlation_create"];
  };
  "/api/projects/{project_id}/insights/path/": {
    get: operations["insights_path_retrieve"];
    post: operations["insights_path_create"];
  };
  "/api/projects/{project_id}/insights/retention/": {
    get: operations["insights_retention_retrieve"];
  };
  "/api/projects/{project_id}/insights/trend/": {
    get: operations["insights_trend_retrieve"];
    post: operations["Trends"];
  };
  "/api/projects/{project_id}/integrations/": {
    get: operations["integrations_list"];
    post: operations["integrations_create"];
  };
  "/api/projects/{project_id}/integrations/{id}/": {
    get: operations["integrations_retrieve"];
    delete: operations["integrations_destroy"];
  };
  "/api/projects/{project_id}/integrations/{id}/channels/": {
    get: operations["integrations_channels_retrieve"];
  };
  "/api/projects/{project_id}/persons/": {
    get: operations["persons_list"];
    post: operations["persons_create"];
  };
  "/api/projects/{project_id}/persons/{id}/": {
    get: operations["persons_retrieve"];
    /**
     * Only for setting properties on the person. "properties" from the request data will be updated via a "$set" event.
     * This means that only the properties listed will be updated, but other properties won't be removed nor updated.
     * If you would like to remove a property use the `delete_property` endpoint.
     */
    put: operations["persons_update"];
    delete: operations["persons_destroy"];
    patch: operations["persons_partial_update"];
  };
  "/api/projects/{project_id}/persons/{id}/activity/": {
    get: operations["persons_activity_retrieve_2"];
  };
  "/api/projects/{project_id}/persons/{id}/delete_property/": {
    post: operations["persons_delete_property_create"];
  };
  "/api/projects/{project_id}/persons/{id}/split/": {
    post: operations["persons_split_create"];
  };
  "/api/projects/{project_id}/persons/{id}/update_property/": {
    post: operations["persons_update_property_create"];
  };
  "/api/projects/{project_id}/persons/activity/": {
    get: operations["persons_activity_retrieve"];
  };
  "/api/projects/{project_id}/persons/cohorts/": {
    get: operations["persons_cohorts_retrieve"];
  };
  "/api/projects/{project_id}/persons/funnel/": {
    get: operations["persons_funnel_retrieve"];
    post: operations["persons_funnel_create"];
  };
  "/api/projects/{project_id}/persons/funnel/correlation/": {
    get: operations["persons_funnel_correlation_retrieve"];
    post: operations["persons_funnel_correlation_create"];
  };
  "/api/projects/{project_id}/persons/lifecycle/": {
    get: operations["persons_lifecycle_retrieve"];
  };
  "/api/projects/{project_id}/persons/path/": {
    get: operations["persons_path_retrieve"];
    post: operations["persons_path_create"];
  };
  "/api/projects/{project_id}/persons/properties/": {
    get: operations["persons_properties_retrieve"];
  };
  "/api/projects/{project_id}/persons/retention/": {
    get: operations["persons_retention_retrieve"];
  };
  "/api/projects/{project_id}/persons/stickiness/": {
    get: operations["persons_stickiness_retrieve"];
  };
  "/api/projects/{project_id}/persons/trends/": {
    get: operations["persons_trends_retrieve"];
  };
  "/api/projects/{project_id}/persons/values/": {
    get: operations["persons_values_retrieve"];
  };
  "/api/projects/{project_id}/plugin_configs/": {
    get: operations["plugin_configs_list"];
    post: operations["plugin_configs_create"];
  };
  "/api/projects/{project_id}/plugin_configs/{parent_lookup_plugin_config_id}/logs/": {
    get: operations["plugin_configs_logs_list"];
  };
  "/api/projects/{project_id}/plugin_configs/{id}/": {
    get: operations["plugin_configs_retrieve"];
    put: operations["plugin_configs_update"];
    delete: operations["plugin_configs_destroy"];
    patch: operations["plugin_configs_partial_update"];
  };
  "/api/projects/{project_id}/plugin_configs/{id}/frontend/": {
    get: operations["plugin_configs_frontend_retrieve"];
  };
  "/api/projects/{project_id}/plugin_configs/{id}/job/": {
    post: operations["plugin_configs_job_create"];
  };
  "/api/projects/{project_id}/plugin_configs/rearrange/": {
    patch: operations["plugin_configs_rearrange_partial_update"];
  };
  "/api/projects/{project_id}/property_definitions/": {
    get: operations["property_definitions_list"];
  };
  "/api/projects/{project_id}/property_definitions/{id}/": {
    get: operations["property_definitions_retrieve"];
    put: operations["property_definitions_update"];
    patch: operations["property_definitions_partial_update"];
  };
  "/api/projects/{project_id}/session_recordings/": {
    get: operations["session_recordings_retrieve"];
  };
  "/api/projects/{project_id}/session_recordings/{id}/": {
    get: operations["session_recordings_retrieve_2"];
  };
  "/api/projects/{project_id}/session_recordings/{id}/snapshots/": {
    get: operations["session_recordings_snapshots_retrieve"];
  };
  "/api/projects/{project_id}/session_recordings/properties/": {
    get: operations["session_recordings_properties_retrieve"];
  };
  "/api/projects/{project_id}/subscriptions/": {
    get: operations["subscriptions_list"];
    post: operations["subscriptions_create"];
  };
  "/api/projects/{project_id}/subscriptions/{id}/": {
    get: operations["subscriptions_retrieve"];
    put: operations["subscriptions_update"];
    /** Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
    delete: operations["subscriptions_destroy"];
    patch: operations["subscriptions_partial_update"];
  };
  "/api/projects/{project_id}/uploaded_media/": {
    /**
     * When object storage is available this API allows upload of media which can be used, for example, in text cards on dashboards.
     *
     *     Uploaded media must have a content type beginning with 'image/' and be less than 4MB.
     */
    post: operations["uploaded_media_create"];
  };
  "/api/prompts/my_prompts/": {
    /** Create, read, update and delete prompt sequences state for a person. */
    patch: operations["prompts_my_prompts_partial_update"];
  };
}

export interface components {
  schemas: {
    /** @description Serializer mixin that resolves appropriate response for tags depending on license. */
    Action: {
      id?: number;
      name?: string | null;
      description?: string;
      tags?: unknown[];
      post_to_slack?: boolean;
      slack_message_format?: string;
      steps?: components["schemas"]["ActionStep"][];
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      deleted?: boolean;
      is_calculating?: boolean;
      /** Format: date-time */
      last_calculated_at?: string;
      team_id?: number;
      /** @default true */
      is_action?: boolean;
    };
    ActionStep: {
      id?: string;
      event?: string | null;
      tag_name?: string | null;
      text?: string | null;
      href?: string | null;
      selector?: string | null;
      url?: string | null;
      name?: string | null;
      /** @enum {string|null} */
      url_matching?: ("contains" | "regex" | "exact" | "" | null) | null;
      properties?: { [key: string]: unknown } | null;
    };
    ActivityLog: {
      /** Format: uuid */
      id?: string;
      user: components["schemas"]["UserBasic"];
      unread?: boolean;
      /** Format: uuid */
      organization_id?: string | null;
      is_system?: boolean | null;
      activity: string;
      item_id?: string | null;
      scope: string;
      detail?: { [key: string]: unknown } | null;
      /** Format: date-time */
      created_at?: string;
    };
    Annotation: {
      id?: number;
      content?: string | null;
      /** Format: date-time */
      date_marker?: string | null;
      /** @enum {string} */
      creation_type?: "USR" | "GIT";
      dashboard_item?: number | null;
      insight_short_id?: string | null;
      insight_name?: string | null;
      created_by?: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      deleted?: boolean;
      /** @enum {string} */
      scope?: "dashboard_item" | "project" | "organization";
    };
    ClickhouseEvent: {
      id?: string;
      distinct_id?: string;
      properties?: string;
      event?: string;
      timestamp?: string;
      person?: string;
      elements?: string;
      elements_chain?: string;
    };
    Cohort: {
      id?: number;
      name?: string | null;
      description?: string;
      groups?: { [key: string]: unknown };
      deleted?: boolean;
      filters?: { [key: string]: unknown } | null;
      is_calculating?: boolean;
      created_by?: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      last_calculation?: string;
      errors_calculating?: number;
      count?: number;
      is_static?: boolean;
    };
    /** @description Serializer mixin that resolves appropriate response for tags depending on license. */
    Dashboard: {
      id?: number;
      name?: string | null;
      description?: string;
      items?: string;
      pinned?: boolean;
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      is_shared?: boolean;
      deleted?: boolean;
      /** @enum {string} */
      creation_mode?: "default" | "template" | "duplicate";
      use_template?: string;
      use_dashboard?: number | null;
      filters?: { [key: string]: unknown };
      tags?: unknown[];
      tiles?: string;
      /** @enum {integer} */
      restriction_level?: 21 | 37;
      /** @enum {integer} */
      effective_restriction_level?: 21 | 37;
      /** @enum {integer} */
      effective_privilege_level?: 21 | 37;
    };
    /** @description Serializer mixin that resolves appropriate response for tags depending on license. */
    EventDefinition: {
      /** Format: uuid */
      id?: string;
      name: string;
      volume_30_day?: number | null;
      query_usage_30_day?: number | null;
      /** Format: date-time */
      created_at?: string | null;
      /** Format: date-time */
      last_seen_at?: string | null;
      /** Format: date-time */
      last_updated_at?: string;
      tags?: unknown[];
      is_action?: string;
      action_id?: number;
      is_calculating?: boolean;
      /** Format: date-time */
      last_calculated_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      /** @default false */
      post_to_slack?: boolean;
    };
    Experiment: {
      id?: number;
      name: string;
      description?: string | null;
      /** Format: date-time */
      start_date?: string | null;
      /** Format: date-time */
      end_date?: string | null;
      feature_flag_key: string;
      feature_flag?: number;
      parameters?: { [key: string]: unknown } | null;
      secondary_metrics?: { [key: string]: unknown } | null;
      filters?: { [key: string]: unknown };
      archived?: boolean;
      created_by?: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    /** @description Standard ExportedAsset serializer that doesn't return content. */
    ExportedAsset: {
      id?: number;
      dashboard?: number | null;
      insight?: number | null;
      /** @enum {string} */
      export_format: "image/png" | "application/pdf" | "text/csv";
      /** Format: date-time */
      created_at?: string;
      has_content?: string;
      export_context?: { [key: string]: unknown } | null;
      filename?: string;
    };
    FeatureFlag: {
      id?: number;
      /** @description contains the description for the flag (field name `name` is kept for backwards-compatibility) */
      name?: string;
      key: string;
      filters?: { [key: string]: unknown };
      deleted?: boolean;
      active?: boolean;
      created_by?: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at?: string;
      is_simple_flag?: boolean;
      rollout_percentage?: number | null;
      ensure_experience_continuity?: boolean | null;
      experiment_set?: number[];
    };
    FilterAction: {
      /** @description ID of the action to filter on. For example `2841`. */
      id: string;
      properties?: components["schemas"]["Property"][];
      /**
       * @description How to aggregate results, shown as "counted by" in the interface.
       * - `total` (default): no aggregation, count by events
       * - `dau`: count by unique users. Despite the name, if you select the `interval` to be weekly or monthly, this will show weekly or monthly active users respectively
       * - `weekly_active`: rolling average of users of the last 7 days.
       * - `monthly_active`: rolling average of users of the last month.
       * - `unique_group`: count by group. Requires `math_group_type_index` to be sent. You can get the index by hitting `/api/projects/@current/groups_types/`.
       *
       * All of the below are property aggregations, and require `math_property` to be sent with an event property.
       * - `sum`: sum of a numeric property.
       * - `min`: min of a numeric property.
       * - `max`: max of a numeric property.
       * - `median`: median of a numeric property.
       * - `p90`: 90th percentile of a numeric property.
       * - `p95` 95th percentile of a numeric property.
       * - `p99`: 99th percentile of a numeric property.
       *
       * @default total
       * @enum {string}
       */
      math?:
        | "total"
        | "dau"
        | "weekly_active"
        | "monthly_active"
        | "unique_group"
        | "unique_session"
        | "sum"
        | "min"
        | "max"
        | "median"
        | "p90"
        | "p95"
        | "p99"
        | "min_count_per_actor"
        | "max_count_per_actor"
        | "median_count_per_actor"
        | "p90_count_per_actor"
        | "p95_count_per_actor"
        | "p99_count_per_actor";
    };
    FilterEvent: {
      /** @description Name of the event to filter on. For example `$pageview` or `user sign up`. */
      id: string;
      properties?: components["schemas"]["Property"][];
      /**
       * @description How to aggregate results, shown as "counted by" in the interface.
       * - `total` (default): no aggregation, count by events
       * - `dau`: count by unique users. Despite the name, if you select the `interval` to be weekly or monthly, this will show weekly or monthly active users respectively
       * - `weekly_active`: rolling average of users of the last 7 days.
       * - `monthly_active`: rolling average of users of the last month.
       * - `unique_group`: count by group. Requires `math_group_type_index` to be sent. You can get the index by hitting `/api/projects/@current/groups_types/`.
       *
       * All of the below are property aggregations, and require `math_property` to be sent with an event property.
       * - `sum`: sum of a numeric property.
       * - `min`: min of a numeric property.
       * - `max`: max of a numeric property.
       * - `median`: median of a numeric property.
       * - `p90`: 90th percentile of a numeric property.
       * - `p95` 95th percentile of a numeric property.
       * - `p99`: 99th percentile of a numeric property.
       *
       * @default total
       * @enum {string}
       */
      math?:
        | "total"
        | "dau"
        | "weekly_active"
        | "monthly_active"
        | "unique_group"
        | "unique_session"
        | "sum"
        | "min"
        | "max"
        | "median"
        | "p90"
        | "p95"
        | "p99"
        | "min_count_per_actor"
        | "max_count_per_actor"
        | "median_count_per_actor"
        | "p90_count_per_actor"
        | "p95_count_per_actor"
        | "p99_count_per_actor";
    };
    Funnel: {
      /** @description Events to filter on. One of `events` or `actions` is required. */
      events?: components["schemas"]["FilterEvent"][];
      /** @description Actions to filter on. One of `events` or `actions` is required. */
      actions?: components["schemas"]["FilterAction"][];
      /** @description Filter events by event property, person property, cohort, groups and more. */
      properties?: components["schemas"]["Property"];
      /**
       * @description Whether to filter out internal and test accounts. See "project settings" in your PostHog account for the filters.
       * @default false
       */
      filter_test_accounts?: boolean;
      /**
       * @description What date to filter the results from. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year.
       * @default -7d
       */
      date_from?: string;
      /**
       * @description What date to filter the results to. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year.
       * @default -7d
       */
      date_to?: string;
      /**
       * @description A property or cohort to break down on. You can select the type of the property with breakdown_type.
       * - `event` (default): a property key
       * - `person`: a person property key
       * - `cohort`: an array of cohort IDs (ie `[9581,5812]`)
       */
      breakdown?: string;
      /**
       * @description Type of property to break down on.
       * @default event
       * @enum {string}
       */
      breakdown_type?: "event" | "person" | "cohort" | "group" | "session";
      /**
       * @description Funnel window size. Set in combination with funnel_window_interval, so defaults to 'days'.
       * @default 14
       */
      funnel_window_interval?: number;
      /**
       * @description The type of interval. Used in combination with `funnel_window_intervals`.
       * @default days
       * @enum {string}
       */
      funnel_window_interval_type?:
        | "DAY"
        | "MINUTE"
        | "HOUR"
        | "WEEK"
        | "MONTH";
      /**
       * @description The visualisation type.
       * - `steps` Track instances progress between steps of the funnel
       * - `trends` Track how this funnel's conversion rate is trending over time.
       * - `time_to_convert` Track how long it takes for instances to convert
       * @default steps
       * @enum {string}
       */
      funnel_viz_type?: "trends" | "time_to_convert" | "steps";
      /**
       * @description - `ordered` - Step B must happen after Step A, but any number events can happen between A and B.
       * - `strict` - Step B must happen directly after Step A without any events in between.
       * - `unordered` - Steps can be completed in any sequence.
       * @default ordered
       * @enum {string}
       */
      funnel_order_type?: "strict" | "unordered" | "ordered";
      /** @description Exclude users/groups that completed the specified event between two specific steps. Note that these users/groups will be completely excluded from the entire funnel. */
      exclusions?: components["schemas"]["FunnelExclusion"][];
      /**
       * @description Aggregate by users or by groups. `0` means user, `>0` means a group. See interface for the corresponding ID of the group.
       * @default 0
       */
      aggregation_group_type_index?: number;
      /** @default 10 */
      breakdown_limit?: number;
      /**
       * @description (DEPRECATED) Funnel window size in days. Use `funnel_window_interval` and `funnel_window_interval_type`
       * @default 14
       */
      funnel_window_days?: number;
    };
    FunnelExclusion: {
      /** @description Name of the event to filter on. For example `$pageview` or `user sign up`. */
      id: string;
      /** @description Filter events by event property, person property, cohort, groups and more. */
      properties?: components["schemas"]["Property"];
      /** @default 0 */
      funnel_from_step?: number;
      /** @default 1 */
      funnel_to_step?: number;
    };
    FunnelStepsResult: {
      /** @description Number of people in this step. */
      count: number;
      /** @description Corresponds to the `id` of the entities passed through to `events` or `actions`. */
      action_id: string;
      /**
       * Format: float
       * @description Average conversion time of person or groups between steps. `null` for the first step.
       */
      average_conversion_time: number;
      /**
       * Format: float
       * @description Median conversion time of person or groups between steps. `null` for the first step.
       */
      median_conversion_time: number;
      /** @description Path of a URL to get a list of people that converted after this step. In this format: `/api/person/funnel?...` */
      converted_people_url: string;
      /** @description Path of a URL to get a list of people that dropped after this step. In this format: `/api/person/funnel?...` */
      dropped_people_url: string;
      /** @description Order of this step in the funnel. The API should return the steps in order anyway. */
      order: string;
    };
    FunnelStepsResults: {
      /** @description Whether the result is cached. To force a refresh, pass ?refresh=true */
      is_cached: boolean;
      /**
       * Format: date-time
       * @description If the result is cached, when it was last refreshed.
       */
      last_refresh: string;
      /**
       * @description Timezone the chart is displayed in
       * @default UTC
       * @enum {string}
       */
      timezone?:
        | "Africa/Abidjan"
        | "Africa/Accra"
        | "Africa/Addis_Ababa"
        | "Africa/Algiers"
        | "Africa/Asmara"
        | "Africa/Bamako"
        | "Africa/Bangui"
        | "Africa/Banjul"
        | "Africa/Bissau"
        | "Africa/Blantyre"
        | "Africa/Brazzaville"
        | "Africa/Bujumbura"
        | "Africa/Cairo"
        | "Africa/Casablanca"
        | "Africa/Ceuta"
        | "Africa/Conakry"
        | "Africa/Dakar"
        | "Africa/Dar_es_Salaam"
        | "Africa/Djibouti"
        | "Africa/Douala"
        | "Africa/El_Aaiun"
        | "Africa/Freetown"
        | "Africa/Gaborone"
        | "Africa/Harare"
        | "Africa/Johannesburg"
        | "Africa/Juba"
        | "Africa/Kampala"
        | "Africa/Khartoum"
        | "Africa/Kigali"
        | "Africa/Kinshasa"
        | "Africa/Lagos"
        | "Africa/Libreville"
        | "Africa/Lome"
        | "Africa/Luanda"
        | "Africa/Lubumbashi"
        | "Africa/Lusaka"
        | "Africa/Malabo"
        | "Africa/Maputo"
        | "Africa/Maseru"
        | "Africa/Mbabane"
        | "Africa/Mogadishu"
        | "Africa/Monrovia"
        | "Africa/Nairobi"
        | "Africa/Ndjamena"
        | "Africa/Niamey"
        | "Africa/Nouakchott"
        | "Africa/Ouagadougou"
        | "Africa/Porto-Novo"
        | "Africa/Sao_Tome"
        | "Africa/Tripoli"
        | "Africa/Tunis"
        | "Africa/Windhoek"
        | "America/Adak"
        | "America/Anchorage"
        | "America/Anguilla"
        | "America/Antigua"
        | "America/Araguaina"
        | "America/Argentina/Buenos_Aires"
        | "America/Argentina/Catamarca"
        | "America/Argentina/Cordoba"
        | "America/Argentina/Jujuy"
        | "America/Argentina/La_Rioja"
        | "America/Argentina/Mendoza"
        | "America/Argentina/Rio_Gallegos"
        | "America/Argentina/Salta"
        | "America/Argentina/San_Juan"
        | "America/Argentina/San_Luis"
        | "America/Argentina/Tucuman"
        | "America/Argentina/Ushuaia"
        | "America/Aruba"
        | "America/Asuncion"
        | "America/Atikokan"
        | "America/Bahia"
        | "America/Bahia_Banderas"
        | "America/Barbados"
        | "America/Belem"
        | "America/Belize"
        | "America/Blanc-Sablon"
        | "America/Boa_Vista"
        | "America/Bogota"
        | "America/Boise"
        | "America/Cambridge_Bay"
        | "America/Campo_Grande"
        | "America/Cancun"
        | "America/Caracas"
        | "America/Cayenne"
        | "America/Cayman"
        | "America/Chicago"
        | "America/Chihuahua"
        | "America/Costa_Rica"
        | "America/Creston"
        | "America/Cuiaba"
        | "America/Curacao"
        | "America/Danmarkshavn"
        | "America/Dawson"
        | "America/Dawson_Creek"
        | "America/Denver"
        | "America/Detroit"
        | "America/Dominica"
        | "America/Edmonton"
        | "America/Eirunepe"
        | "America/El_Salvador"
        | "America/Fort_Nelson"
        | "America/Fortaleza"
        | "America/Glace_Bay"
        | "America/Goose_Bay"
        | "America/Grand_Turk"
        | "America/Grenada"
        | "America/Guadeloupe"
        | "America/Guatemala"
        | "America/Guayaquil"
        | "America/Guyana"
        | "America/Halifax"
        | "America/Havana"
        | "America/Hermosillo"
        | "America/Indiana/Indianapolis"
        | "America/Indiana/Knox"
        | "America/Indiana/Marengo"
        | "America/Indiana/Petersburg"
        | "America/Indiana/Tell_City"
        | "America/Indiana/Vevay"
        | "America/Indiana/Vincennes"
        | "America/Indiana/Winamac"
        | "America/Inuvik"
        | "America/Iqaluit"
        | "America/Jamaica"
        | "America/Juneau"
        | "America/Kentucky/Louisville"
        | "America/Kentucky/Monticello"
        | "America/Kralendijk"
        | "America/La_Paz"
        | "America/Lima"
        | "America/Los_Angeles"
        | "America/Lower_Princes"
        | "America/Maceio"
        | "America/Managua"
        | "America/Manaus"
        | "America/Marigot"
        | "America/Martinique"
        | "America/Matamoros"
        | "America/Mazatlan"
        | "America/Menominee"
        | "America/Merida"
        | "America/Metlakatla"
        | "America/Mexico_City"
        | "America/Miquelon"
        | "America/Moncton"
        | "America/Monterrey"
        | "America/Montevideo"
        | "America/Montserrat"
        | "America/Nassau"
        | "America/New_York"
        | "America/Nipigon"
        | "America/Nome"
        | "America/Noronha"
        | "America/North_Dakota/Beulah"
        | "America/North_Dakota/Center"
        | "America/North_Dakota/New_Salem"
        | "America/Nuuk"
        | "America/Ojinaga"
        | "America/Panama"
        | "America/Pangnirtung"
        | "America/Paramaribo"
        | "America/Phoenix"
        | "America/Port-au-Prince"
        | "America/Port_of_Spain"
        | "America/Porto_Velho"
        | "America/Puerto_Rico"
        | "America/Punta_Arenas"
        | "America/Rainy_River"
        | "America/Rankin_Inlet"
        | "America/Recife"
        | "America/Regina"
        | "America/Resolute"
        | "America/Rio_Branco"
        | "America/Santarem"
        | "America/Santiago"
        | "America/Santo_Domingo"
        | "America/Sao_Paulo"
        | "America/Scoresbysund"
        | "America/Sitka"
        | "America/St_Barthelemy"
        | "America/St_Johns"
        | "America/St_Kitts"
        | "America/St_Lucia"
        | "America/St_Thomas"
        | "America/St_Vincent"
        | "America/Swift_Current"
        | "America/Tegucigalpa"
        | "America/Thule"
        | "America/Thunder_Bay"
        | "America/Tijuana"
        | "America/Toronto"
        | "America/Tortola"
        | "America/Vancouver"
        | "America/Whitehorse"
        | "America/Winnipeg"
        | "America/Yakutat"
        | "America/Yellowknife"
        | "Antarctica/Casey"
        | "Antarctica/Davis"
        | "Antarctica/DumontDUrville"
        | "Antarctica/Macquarie"
        | "Antarctica/Mawson"
        | "Antarctica/McMurdo"
        | "Antarctica/Palmer"
        | "Antarctica/Rothera"
        | "Antarctica/Syowa"
        | "Antarctica/Troll"
        | "Antarctica/Vostok"
        | "Arctic/Longyearbyen"
        | "Asia/Aden"
        | "Asia/Almaty"
        | "Asia/Amman"
        | "Asia/Anadyr"
        | "Asia/Aqtau"
        | "Asia/Aqtobe"
        | "Asia/Ashgabat"
        | "Asia/Atyrau"
        | "Asia/Baghdad"
        | "Asia/Bahrain"
        | "Asia/Baku"
        | "Asia/Bangkok"
        | "Asia/Barnaul"
        | "Asia/Beirut"
        | "Asia/Bishkek"
        | "Asia/Brunei"
        | "Asia/Chita"
        | "Asia/Choibalsan"
        | "Asia/Colombo"
        | "Asia/Damascus"
        | "Asia/Dhaka"
        | "Asia/Dili"
        | "Asia/Dubai"
        | "Asia/Dushanbe"
        | "Asia/Famagusta"
        | "Asia/Gaza"
        | "Asia/Hebron"
        | "Asia/Ho_Chi_Minh"
        | "Asia/Hong_Kong"
        | "Asia/Hovd"
        | "Asia/Irkutsk"
        | "Asia/Jakarta"
        | "Asia/Jayapura"
        | "Asia/Jerusalem"
        | "Asia/Kabul"
        | "Asia/Kamchatka"
        | "Asia/Karachi"
        | "Asia/Kathmandu"
        | "Asia/Khandyga"
        | "Asia/Kolkata"
        | "Asia/Krasnoyarsk"
        | "Asia/Kuala_Lumpur"
        | "Asia/Kuching"
        | "Asia/Kuwait"
        | "Asia/Macau"
        | "Asia/Magadan"
        | "Asia/Makassar"
        | "Asia/Manila"
        | "Asia/Muscat"
        | "Asia/Nicosia"
        | "Asia/Novokuznetsk"
        | "Asia/Novosibirsk"
        | "Asia/Omsk"
        | "Asia/Oral"
        | "Asia/Phnom_Penh"
        | "Asia/Pontianak"
        | "Asia/Pyongyang"
        | "Asia/Qatar"
        | "Asia/Qostanay"
        | "Asia/Qyzylorda"
        | "Asia/Riyadh"
        | "Asia/Sakhalin"
        | "Asia/Samarkand"
        | "Asia/Seoul"
        | "Asia/Shanghai"
        | "Asia/Singapore"
        | "Asia/Srednekolymsk"
        | "Asia/Taipei"
        | "Asia/Tashkent"
        | "Asia/Tbilisi"
        | "Asia/Tehran"
        | "Asia/Thimphu"
        | "Asia/Tokyo"
        | "Asia/Tomsk"
        | "Asia/Ulaanbaatar"
        | "Asia/Urumqi"
        | "Asia/Ust-Nera"
        | "Asia/Vientiane"
        | "Asia/Vladivostok"
        | "Asia/Yakutsk"
        | "Asia/Yangon"
        | "Asia/Yekaterinburg"
        | "Asia/Yerevan"
        | "Atlantic/Azores"
        | "Atlantic/Bermuda"
        | "Atlantic/Canary"
        | "Atlantic/Cape_Verde"
        | "Atlantic/Faroe"
        | "Atlantic/Madeira"
        | "Atlantic/Reykjavik"
        | "Atlantic/South_Georgia"
        | "Atlantic/St_Helena"
        | "Atlantic/Stanley"
        | "Australia/Adelaide"
        | "Australia/Brisbane"
        | "Australia/Broken_Hill"
        | "Australia/Darwin"
        | "Australia/Eucla"
        | "Australia/Hobart"
        | "Australia/Lindeman"
        | "Australia/Lord_Howe"
        | "Australia/Melbourne"
        | "Australia/Perth"
        | "Australia/Sydney"
        | "Canada/Atlantic"
        | "Canada/Central"
        | "Canada/Eastern"
        | "Canada/Mountain"
        | "Canada/Newfoundland"
        | "Canada/Pacific"
        | "Europe/Amsterdam"
        | "Europe/Andorra"
        | "Europe/Astrakhan"
        | "Europe/Athens"
        | "Europe/Belgrade"
        | "Europe/Berlin"
        | "Europe/Bratislava"
        | "Europe/Brussels"
        | "Europe/Bucharest"
        | "Europe/Budapest"
        | "Europe/Busingen"
        | "Europe/Chisinau"
        | "Europe/Copenhagen"
        | "Europe/Dublin"
        | "Europe/Gibraltar"
        | "Europe/Guernsey"
        | "Europe/Helsinki"
        | "Europe/Isle_of_Man"
        | "Europe/Istanbul"
        | "Europe/Jersey"
        | "Europe/Kaliningrad"
        | "Europe/Kiev"
        | "Europe/Kirov"
        | "Europe/Lisbon"
        | "Europe/Ljubljana"
        | "Europe/London"
        | "Europe/Luxembourg"
        | "Europe/Madrid"
        | "Europe/Malta"
        | "Europe/Mariehamn"
        | "Europe/Minsk"
        | "Europe/Monaco"
        | "Europe/Moscow"
        | "Europe/Oslo"
        | "Europe/Paris"
        | "Europe/Podgorica"
        | "Europe/Prague"
        | "Europe/Riga"
        | "Europe/Rome"
        | "Europe/Samara"
        | "Europe/San_Marino"
        | "Europe/Sarajevo"
        | "Europe/Saratov"
        | "Europe/Simferopol"
        | "Europe/Skopje"
        | "Europe/Sofia"
        | "Europe/Stockholm"
        | "Europe/Tallinn"
        | "Europe/Tirane"
        | "Europe/Ulyanovsk"
        | "Europe/Uzhgorod"
        | "Europe/Vaduz"
        | "Europe/Vatican"
        | "Europe/Vienna"
        | "Europe/Vilnius"
        | "Europe/Volgograd"
        | "Europe/Warsaw"
        | "Europe/Zagreb"
        | "Europe/Zaporozhye"
        | "Europe/Zurich"
        | "GMT"
        | "Indian/Antananarivo"
        | "Indian/Chagos"
        | "Indian/Christmas"
        | "Indian/Cocos"
        | "Indian/Comoro"
        | "Indian/Kerguelen"
        | "Indian/Mahe"
        | "Indian/Maldives"
        | "Indian/Mauritius"
        | "Indian/Mayotte"
        | "Indian/Reunion"
        | "Pacific/Apia"
        | "Pacific/Auckland"
        | "Pacific/Bougainville"
        | "Pacific/Chatham"
        | "Pacific/Chuuk"
        | "Pacific/Easter"
        | "Pacific/Efate"
        | "Pacific/Enderbury"
        | "Pacific/Fakaofo"
        | "Pacific/Fiji"
        | "Pacific/Funafuti"
        | "Pacific/Galapagos"
        | "Pacific/Gambier"
        | "Pacific/Guadalcanal"
        | "Pacific/Guam"
        | "Pacific/Honolulu"
        | "Pacific/Kiritimati"
        | "Pacific/Kosrae"
        | "Pacific/Kwajalein"
        | "Pacific/Majuro"
        | "Pacific/Marquesas"
        | "Pacific/Midway"
        | "Pacific/Nauru"
        | "Pacific/Niue"
        | "Pacific/Norfolk"
        | "Pacific/Noumea"
        | "Pacific/Pago_Pago"
        | "Pacific/Palau"
        | "Pacific/Pitcairn"
        | "Pacific/Pohnpei"
        | "Pacific/Port_Moresby"
        | "Pacific/Rarotonga"
        | "Pacific/Saipan"
        | "Pacific/Tahiti"
        | "Pacific/Tarawa"
        | "Pacific/Tongatapu"
        | "Pacific/Wake"
        | "Pacific/Wallis"
        | "US/Alaska"
        | "US/Arizona"
        | "US/Central"
        | "US/Eastern"
        | "US/Hawaii"
        | "US/Mountain"
        | "US/Pacific"
        | "UTC";
      result: components["schemas"]["FunnelStepsResult"][];
    };
    GenericInsights: {
      /** @description Events to filter on. One of `events` or `actions` is required. */
      events?: components["schemas"]["FilterEvent"][];
      /** @description Actions to filter on. One of `events` or `actions` is required. */
      actions?: components["schemas"]["FilterAction"][];
      /** @description Filter events by event property, person property, cohort, groups and more. */
      properties?: components["schemas"]["Property"];
      /**
       * @description Whether to filter out internal and test accounts. See "project settings" in your PostHog account for the filters.
       * @default false
       */
      filter_test_accounts?: boolean;
      /**
       * @description What date to filter the results from. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year.
       * @default -7d
       */
      date_from?: string;
      /**
       * @description What date to filter the results to. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year.
       * @default -7d
       */
      date_to?: string;
    };
    Group: {
      group_type_index: number;
      group_key: string;
      group_properties?: { [key: string]: unknown };
      /** Format: date-time */
      created_at?: string;
    };
    GroupType: {
      group_type?: string;
      group_type_index?: number;
      name_singular?: string | null;
      name_plural?: string | null;
    };
    Hook: {
      id?: string;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string;
      event: string;
      /**
       * Target URL
       * Format: uri
       */
      target: string;
      resource_id?: number | null;
      team?: number;
    };
    /** @description Simplified serializer to speed response times when loading large amounts of objects. */
    Insight: {
      id?: number;
      short_id?: string;
      name?: string | null;
      derived_name?: string | null;
      filters?: { [key: string]: unknown };
      /**
       * @description A hash of the filters that generate this insight.
       *         Used as a cache key for this result.
       *         A different hash will be returned if loading the insight on a dashboard that has filters.
       */
      filters_hash?: string;
      order?: number | null;
      deleted?: boolean;
      /** @description A dashboard ID for each of the dashboards that this insight is displayed on. */
      dashboards?: number[];
      /**
       * @description
       *     The datetime this insight's results were generated.
       *     If added to one or more dashboards the insight can be refreshed separately on each.
       *     Returns the appropriate last_refresh datetime for the context the insight is viewed in
       *     (see from_dashboard query parameter).
       */
      last_refresh?: string;
      refreshing?: boolean;
      result?: string;
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      description?: string | null;
      /** Format: date-time */
      updated_at?: string;
      tags?: unknown[];
      favorited?: boolean;
      saved?: boolean;
      /** Format: date-time */
      last_modified_at?: string;
      last_modified_by?: components["schemas"]["UserBasic"];
      is_sample?: boolean;
      /** @enum {integer} */
      effective_restriction_level?: 21 | 37;
      /** @enum {integer} */
      effective_privilege_level?: 21 | 37;
      /** @description The timezone this chart is displayed in. */
      timezone?: string;
    };
    /** @description Standard Integration serializer. */
    Integration: {
      id?: number;
      /** @enum {string} */
      kind: "slack";
      config?: { [key: string]: unknown };
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      errors?: string;
    };
    OrganizationDomain: {
      /** Format: uuid */
      id?: string;
      domain: string;
      is_verified?: boolean;
      /** Format: date-time */
      verified_at?: string;
      verification_challenge?: string;
      jit_provisioning_enabled?: boolean;
      sso_enforcement?: string;
      has_saml?: boolean;
      saml_entity_id?: string | null;
      saml_acs_url?: string | null;
      saml_x509_cert?: string | null;
    };
    OrganizationInvite: {
      /** Format: uuid */
      id?: string;
      /** Format: email */
      target_email: string;
      first_name?: string;
      emailing_attempt_made?: boolean;
      is_expired?: boolean;
      created_by?: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      message?: string | null;
    };
    OrganizationMember: {
      /** Format: uuid */
      id?: string;
      user?: components["schemas"]["UserBasic"];
      /** @enum {integer} */
      level?: 1 | 8 | 15;
      /** Format: date-time */
      joined_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    PaginatedActionList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Action"][];
    };
    PaginatedAnnotationList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Annotation"][];
    };
    PaginatedClickhouseEventList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["ClickhouseEvent"][];
    };
    PaginatedCohortList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Cohort"][];
    };
    PaginatedDashboardList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Dashboard"][];
    };
    PaginatedEventDefinitionList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["EventDefinition"][];
    };
    PaginatedExperimentList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Experiment"][];
    };
    PaginatedFeatureFlagList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["FeatureFlag"][];
    };
    PaginatedGroupList: {
      next?: string | null;
      previous?: string | null;
      results?: components["schemas"]["Group"][];
    };
    PaginatedHookList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Hook"][];
    };
    PaginatedInsightList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Insight"][];
    };
    PaginatedIntegrationList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Integration"][];
    };
    PaginatedOrganizationDomainList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["OrganizationDomain"][];
    };
    PaginatedOrganizationInviteList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["OrganizationInvite"][];
    };
    PaginatedOrganizationMemberList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["OrganizationMember"][];
    };
    PaginatedPersonList: {
      /**
       * Format: uri
       * @example https://app.posthog.com/api/projects/{project_id}/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example https://app.posthog.com/api/projects/{project_id}/accounts/?offset=400&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Person"][];
    };
    PaginatedPluginConfigList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["PluginConfig"][];
    };
    PaginatedPluginList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Plugin"][];
    };
    PaginatedPluginLogEntryList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["PluginLogEntry"][];
    };
    PaginatedPropertyDefinitionList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["PropertyDefinition"][];
    };
    PaginatedSubscriptionList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["Subscription"][];
    };
    PaginatedTeamBasicList: {
      /** @example 123 */
      count?: number;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=400&limit=100
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?offset=200&limit=100
       */
      previous?: string | null;
      results?: components["schemas"]["TeamBasic"][];
    };
    /** @description Serializer mixin that resolves appropriate response for tags depending on license. */
    PatchedAction: {
      id?: number;
      name?: string | null;
      description?: string;
      tags?: unknown[];
      post_to_slack?: boolean;
      slack_message_format?: string;
      steps?: components["schemas"]["ActionStep"][];
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      deleted?: boolean;
      is_calculating?: boolean;
      /** Format: date-time */
      last_calculated_at?: string;
      team_id?: number;
      /** @default true */
      is_action?: boolean;
    };
    PatchedAnnotation: {
      id?: number;
      content?: string | null;
      /** Format: date-time */
      date_marker?: string | null;
      /** @enum {string} */
      creation_type?: "USR" | "GIT";
      dashboard_item?: number | null;
      insight_short_id?: string | null;
      insight_name?: string | null;
      created_by?: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      deleted?: boolean;
      /** @enum {string} */
      scope?: "dashboard_item" | "project" | "organization";
    };
    PatchedCohort: {
      id?: number;
      name?: string | null;
      description?: string;
      groups?: { [key: string]: unknown };
      deleted?: boolean;
      filters?: { [key: string]: unknown } | null;
      is_calculating?: boolean;
      created_by?: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      last_calculation?: string;
      errors_calculating?: number;
      count?: number;
      is_static?: boolean;
    };
    /** @description Serializer mixin that resolves appropriate response for tags depending on license. */
    PatchedDashboard: {
      id?: number;
      name?: string | null;
      description?: string;
      items?: string;
      pinned?: boolean;
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      is_shared?: boolean;
      deleted?: boolean;
      /** @enum {string} */
      creation_mode?: "default" | "template" | "duplicate";
      use_template?: string;
      use_dashboard?: number | null;
      filters?: { [key: string]: unknown };
      tags?: unknown[];
      tiles?: string;
      /** @enum {integer} */
      restriction_level?: 21 | 37;
      /** @enum {integer} */
      effective_restriction_level?: 21 | 37;
      /** @enum {integer} */
      effective_privilege_level?: 21 | 37;
    };
    /** @description Serializer mixin that resolves appropriate response for tags depending on license. */
    PatchedEventDefinition: {
      /** Format: uuid */
      id?: string;
      name?: string;
      volume_30_day?: number | null;
      query_usage_30_day?: number | null;
      /** Format: date-time */
      created_at?: string | null;
      /** Format: date-time */
      last_seen_at?: string | null;
      /** Format: date-time */
      last_updated_at?: string;
      tags?: unknown[];
      is_action?: string;
      action_id?: number;
      is_calculating?: boolean;
      /** Format: date-time */
      last_calculated_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      /** @default false */
      post_to_slack?: boolean;
    };
    PatchedExperiment: {
      id?: number;
      name?: string;
      description?: string | null;
      /** Format: date-time */
      start_date?: string | null;
      /** Format: date-time */
      end_date?: string | null;
      feature_flag_key?: string;
      feature_flag?: number;
      parameters?: { [key: string]: unknown } | null;
      secondary_metrics?: { [key: string]: unknown } | null;
      filters?: { [key: string]: unknown };
      archived?: boolean;
      created_by?: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    PatchedFeatureFlag: {
      id?: number;
      /** @description contains the description for the flag (field name `name` is kept for backwards-compatibility) */
      name?: string;
      key?: string;
      filters?: { [key: string]: unknown };
      deleted?: boolean;
      active?: boolean;
      created_by?: components["schemas"]["UserBasic"];
      /** Format: date-time */
      created_at?: string;
      is_simple_flag?: boolean;
      rollout_percentage?: number | null;
      ensure_experience_continuity?: boolean | null;
      experiment_set?: number[];
    };
    PatchedGroupType: {
      group_type?: string;
      group_type_index?: number;
      name_singular?: string | null;
      name_plural?: string | null;
    };
    PatchedHook: {
      id?: string;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      updated?: string;
      event?: string;
      /**
       * Target URL
       * Format: uri
       */
      target?: string;
      resource_id?: number | null;
      team?: number;
    };
    /** @description Simplified serializer to speed response times when loading large amounts of objects. */
    PatchedInsight: {
      id?: number;
      short_id?: string;
      name?: string | null;
      derived_name?: string | null;
      filters?: { [key: string]: unknown };
      /**
       * @description A hash of the filters that generate this insight.
       *         Used as a cache key for this result.
       *         A different hash will be returned if loading the insight on a dashboard that has filters.
       */
      filters_hash?: string;
      order?: number | null;
      deleted?: boolean;
      /** @description A dashboard ID for each of the dashboards that this insight is displayed on. */
      dashboards?: number[];
      /**
       * @description
       *     The datetime this insight's results were generated.
       *     If added to one or more dashboards the insight can be refreshed separately on each.
       *     Returns the appropriate last_refresh datetime for the context the insight is viewed in
       *     (see from_dashboard query parameter).
       */
      last_refresh?: string;
      refreshing?: boolean;
      result?: string;
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      description?: string | null;
      /** Format: date-time */
      updated_at?: string;
      tags?: unknown[];
      favorited?: boolean;
      saved?: boolean;
      /** Format: date-time */
      last_modified_at?: string;
      last_modified_by?: components["schemas"]["UserBasic"];
      is_sample?: boolean;
      /** @enum {integer} */
      effective_restriction_level?: 21 | 37;
      /** @enum {integer} */
      effective_privilege_level?: 21 | 37;
      /** @description The timezone this chart is displayed in. */
      timezone?: string;
    };
    PatchedOrganizationDomain: {
      /** Format: uuid */
      id?: string;
      domain?: string;
      is_verified?: boolean;
      /** Format: date-time */
      verified_at?: string;
      verification_challenge?: string;
      jit_provisioning_enabled?: boolean;
      sso_enforcement?: string;
      has_saml?: boolean;
      saml_entity_id?: string | null;
      saml_acs_url?: string | null;
      saml_x509_cert?: string | null;
    };
    PatchedOrganizationMember: {
      /** Format: uuid */
      id?: string;
      user?: components["schemas"]["UserBasic"];
      /** @enum {integer} */
      level?: 1 | 8 | 15;
      /** Format: date-time */
      joined_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    PatchedPerson: {
      id?: number;
      name?: string;
      distinct_ids?: string[];
      properties?: { [key: string]: unknown };
      /** Format: date-time */
      created_at?: string;
      /** Format: uuid */
      uuid?: string;
    };
    PatchedPlugin: {
      id?: number;
      /** @enum {string|null} */
      plugin_type?:
        | ("local" | "custom" | "repository" | "source" | "" | null)
        | null;
      name?: string | null;
      description?: string | null;
      url?: string | null;
      icon?: string | null;
      config_schema?: { [key: string]: unknown };
      tag?: string | null;
      latest_tag?: string;
      is_global?: boolean;
      /** Format: uuid */
      organization_id?: string;
      organization_name?: string;
      capabilities?: { [key: string]: unknown };
      metrics?: { [key: string]: unknown } | null;
      public_jobs?: { [key: string]: unknown } | null;
    };
    PatchedPluginConfig: {
      id?: number;
      plugin?: number;
      enabled?: boolean;
      order?: number;
      config?: string;
      error?: { [key: string]: unknown } | null;
      team_id?: number | null;
      plugin_info?: string;
      delivery_rate_24h?: string;
      /** Format: date-time */
      created_at?: string;
    };
    PatchedPromptSequenceState: {
      key?: string;
      /** Format: date-time */
      last_updated_at?: string;
      step?: number;
      completed?: boolean;
      dismissed?: boolean;
    };
    /** @description Serializer mixin that resolves appropriate response for tags depending on license. */
    PatchedPropertyDefinition: {
      /** Format: uuid */
      id?: string;
      name?: string;
      is_numerical?: boolean;
      query_usage_30_day?: number | null;
      /** @enum {string|null} */
      property_type?:
        | ("DateTime" | "String" | "Numeric" | "Boolean" | "" | null)
        | null;
      tags?: unknown[];
      is_event_property?: string;
    };
    /** @description Standard Subscription serializer. */
    PatchedSubscription: {
      id?: number;
      dashboard?: number | null;
      insight?: number | null;
      /** @enum {string} */
      target_type?: "email" | "slack" | "webhook";
      target_value?: string;
      /** @enum {string} */
      frequency?: "daily" | "weekly" | "monthly" | "yearly";
      interval?: number;
      byweekday?:
        | (
            | "monday"
            | "tuesday"
            | "wednesday"
            | "thursday"
            | "friday"
            | "saturday"
            | "sunday"
          )[]
        | null;
      bysetpos?: number | null;
      count?: number | null;
      /** Format: date-time */
      start_date?: string;
      /** Format: date-time */
      until_date?: string | null;
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      deleted?: boolean;
      title?: string | null;
      summary?: string;
      /** Format: date-time */
      next_delivery_date?: string;
      invite_message?: string | null;
    };
    PatchedTeam: {
      id?: number;
      /** Format: uuid */
      uuid?: string;
      /** Format: uuid */
      organization?: string;
      api_token?: string;
      app_urls?: (string | null)[];
      name?: string;
      slack_incoming_webhook?: string | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      anonymize_ips?: boolean;
      completed_snippet_onboarding?: boolean;
      ingested_event?: boolean;
      test_account_filters?: { [key: string]: unknown };
      test_account_filters_default_checked?: boolean | null;
      path_cleaning_filters?: { [key: string]: unknown } | null;
      is_demo?: boolean;
      /** @enum {string} */
      timezone?:
        | "Africa/Abidjan"
        | "Africa/Accra"
        | "Africa/Addis_Ababa"
        | "Africa/Algiers"
        | "Africa/Asmara"
        | "Africa/Bamako"
        | "Africa/Bangui"
        | "Africa/Banjul"
        | "Africa/Bissau"
        | "Africa/Blantyre"
        | "Africa/Brazzaville"
        | "Africa/Bujumbura"
        | "Africa/Cairo"
        | "Africa/Casablanca"
        | "Africa/Ceuta"
        | "Africa/Conakry"
        | "Africa/Dakar"
        | "Africa/Dar_es_Salaam"
        | "Africa/Djibouti"
        | "Africa/Douala"
        | "Africa/El_Aaiun"
        | "Africa/Freetown"
        | "Africa/Gaborone"
        | "Africa/Harare"
        | "Africa/Johannesburg"
        | "Africa/Juba"
        | "Africa/Kampala"
        | "Africa/Khartoum"
        | "Africa/Kigali"
        | "Africa/Kinshasa"
        | "Africa/Lagos"
        | "Africa/Libreville"
        | "Africa/Lome"
        | "Africa/Luanda"
        | "Africa/Lubumbashi"
        | "Africa/Lusaka"
        | "Africa/Malabo"
        | "Africa/Maputo"
        | "Africa/Maseru"
        | "Africa/Mbabane"
        | "Africa/Mogadishu"
        | "Africa/Monrovia"
        | "Africa/Nairobi"
        | "Africa/Ndjamena"
        | "Africa/Niamey"
        | "Africa/Nouakchott"
        | "Africa/Ouagadougou"
        | "Africa/Porto-Novo"
        | "Africa/Sao_Tome"
        | "Africa/Tripoli"
        | "Africa/Tunis"
        | "Africa/Windhoek"
        | "America/Adak"
        | "America/Anchorage"
        | "America/Anguilla"
        | "America/Antigua"
        | "America/Araguaina"
        | "America/Argentina/Buenos_Aires"
        | "America/Argentina/Catamarca"
        | "America/Argentina/Cordoba"
        | "America/Argentina/Jujuy"
        | "America/Argentina/La_Rioja"
        | "America/Argentina/Mendoza"
        | "America/Argentina/Rio_Gallegos"
        | "America/Argentina/Salta"
        | "America/Argentina/San_Juan"
        | "America/Argentina/San_Luis"
        | "America/Argentina/Tucuman"
        | "America/Argentina/Ushuaia"
        | "America/Aruba"
        | "America/Asuncion"
        | "America/Atikokan"
        | "America/Bahia"
        | "America/Bahia_Banderas"
        | "America/Barbados"
        | "America/Belem"
        | "America/Belize"
        | "America/Blanc-Sablon"
        | "America/Boa_Vista"
        | "America/Bogota"
        | "America/Boise"
        | "America/Cambridge_Bay"
        | "America/Campo_Grande"
        | "America/Cancun"
        | "America/Caracas"
        | "America/Cayenne"
        | "America/Cayman"
        | "America/Chicago"
        | "America/Chihuahua"
        | "America/Costa_Rica"
        | "America/Creston"
        | "America/Cuiaba"
        | "America/Curacao"
        | "America/Danmarkshavn"
        | "America/Dawson"
        | "America/Dawson_Creek"
        | "America/Denver"
        | "America/Detroit"
        | "America/Dominica"
        | "America/Edmonton"
        | "America/Eirunepe"
        | "America/El_Salvador"
        | "America/Fort_Nelson"
        | "America/Fortaleza"
        | "America/Glace_Bay"
        | "America/Goose_Bay"
        | "America/Grand_Turk"
        | "America/Grenada"
        | "America/Guadeloupe"
        | "America/Guatemala"
        | "America/Guayaquil"
        | "America/Guyana"
        | "America/Halifax"
        | "America/Havana"
        | "America/Hermosillo"
        | "America/Indiana/Indianapolis"
        | "America/Indiana/Knox"
        | "America/Indiana/Marengo"
        | "America/Indiana/Petersburg"
        | "America/Indiana/Tell_City"
        | "America/Indiana/Vevay"
        | "America/Indiana/Vincennes"
        | "America/Indiana/Winamac"
        | "America/Inuvik"
        | "America/Iqaluit"
        | "America/Jamaica"
        | "America/Juneau"
        | "America/Kentucky/Louisville"
        | "America/Kentucky/Monticello"
        | "America/Kralendijk"
        | "America/La_Paz"
        | "America/Lima"
        | "America/Los_Angeles"
        | "America/Lower_Princes"
        | "America/Maceio"
        | "America/Managua"
        | "America/Manaus"
        | "America/Marigot"
        | "America/Martinique"
        | "America/Matamoros"
        | "America/Mazatlan"
        | "America/Menominee"
        | "America/Merida"
        | "America/Metlakatla"
        | "America/Mexico_City"
        | "America/Miquelon"
        | "America/Moncton"
        | "America/Monterrey"
        | "America/Montevideo"
        | "America/Montserrat"
        | "America/Nassau"
        | "America/New_York"
        | "America/Nipigon"
        | "America/Nome"
        | "America/Noronha"
        | "America/North_Dakota/Beulah"
        | "America/North_Dakota/Center"
        | "America/North_Dakota/New_Salem"
        | "America/Nuuk"
        | "America/Ojinaga"
        | "America/Panama"
        | "America/Pangnirtung"
        | "America/Paramaribo"
        | "America/Phoenix"
        | "America/Port-au-Prince"
        | "America/Port_of_Spain"
        | "America/Porto_Velho"
        | "America/Puerto_Rico"
        | "America/Punta_Arenas"
        | "America/Rainy_River"
        | "America/Rankin_Inlet"
        | "America/Recife"
        | "America/Regina"
        | "America/Resolute"
        | "America/Rio_Branco"
        | "America/Santarem"
        | "America/Santiago"
        | "America/Santo_Domingo"
        | "America/Sao_Paulo"
        | "America/Scoresbysund"
        | "America/Sitka"
        | "America/St_Barthelemy"
        | "America/St_Johns"
        | "America/St_Kitts"
        | "America/St_Lucia"
        | "America/St_Thomas"
        | "America/St_Vincent"
        | "America/Swift_Current"
        | "America/Tegucigalpa"
        | "America/Thule"
        | "America/Thunder_Bay"
        | "America/Tijuana"
        | "America/Toronto"
        | "America/Tortola"
        | "America/Vancouver"
        | "America/Whitehorse"
        | "America/Winnipeg"
        | "America/Yakutat"
        | "America/Yellowknife"
        | "Antarctica/Casey"
        | "Antarctica/Davis"
        | "Antarctica/DumontDUrville"
        | "Antarctica/Macquarie"
        | "Antarctica/Mawson"
        | "Antarctica/McMurdo"
        | "Antarctica/Palmer"
        | "Antarctica/Rothera"
        | "Antarctica/Syowa"
        | "Antarctica/Troll"
        | "Antarctica/Vostok"
        | "Arctic/Longyearbyen"
        | "Asia/Aden"
        | "Asia/Almaty"
        | "Asia/Amman"
        | "Asia/Anadyr"
        | "Asia/Aqtau"
        | "Asia/Aqtobe"
        | "Asia/Ashgabat"
        | "Asia/Atyrau"
        | "Asia/Baghdad"
        | "Asia/Bahrain"
        | "Asia/Baku"
        | "Asia/Bangkok"
        | "Asia/Barnaul"
        | "Asia/Beirut"
        | "Asia/Bishkek"
        | "Asia/Brunei"
        | "Asia/Chita"
        | "Asia/Choibalsan"
        | "Asia/Colombo"
        | "Asia/Damascus"
        | "Asia/Dhaka"
        | "Asia/Dili"
        | "Asia/Dubai"
        | "Asia/Dushanbe"
        | "Asia/Famagusta"
        | "Asia/Gaza"
        | "Asia/Hebron"
        | "Asia/Ho_Chi_Minh"
        | "Asia/Hong_Kong"
        | "Asia/Hovd"
        | "Asia/Irkutsk"
        | "Asia/Jakarta"
        | "Asia/Jayapura"
        | "Asia/Jerusalem"
        | "Asia/Kabul"
        | "Asia/Kamchatka"
        | "Asia/Karachi"
        | "Asia/Kathmandu"
        | "Asia/Khandyga"
        | "Asia/Kolkata"
        | "Asia/Krasnoyarsk"
        | "Asia/Kuala_Lumpur"
        | "Asia/Kuching"
        | "Asia/Kuwait"
        | "Asia/Macau"
        | "Asia/Magadan"
        | "Asia/Makassar"
        | "Asia/Manila"
        | "Asia/Muscat"
        | "Asia/Nicosia"
        | "Asia/Novokuznetsk"
        | "Asia/Novosibirsk"
        | "Asia/Omsk"
        | "Asia/Oral"
        | "Asia/Phnom_Penh"
        | "Asia/Pontianak"
        | "Asia/Pyongyang"
        | "Asia/Qatar"
        | "Asia/Qostanay"
        | "Asia/Qyzylorda"
        | "Asia/Riyadh"
        | "Asia/Sakhalin"
        | "Asia/Samarkand"
        | "Asia/Seoul"
        | "Asia/Shanghai"
        | "Asia/Singapore"
        | "Asia/Srednekolymsk"
        | "Asia/Taipei"
        | "Asia/Tashkent"
        | "Asia/Tbilisi"
        | "Asia/Tehran"
        | "Asia/Thimphu"
        | "Asia/Tokyo"
        | "Asia/Tomsk"
        | "Asia/Ulaanbaatar"
        | "Asia/Urumqi"
        | "Asia/Ust-Nera"
        | "Asia/Vientiane"
        | "Asia/Vladivostok"
        | "Asia/Yakutsk"
        | "Asia/Yangon"
        | "Asia/Yekaterinburg"
        | "Asia/Yerevan"
        | "Atlantic/Azores"
        | "Atlantic/Bermuda"
        | "Atlantic/Canary"
        | "Atlantic/Cape_Verde"
        | "Atlantic/Faroe"
        | "Atlantic/Madeira"
        | "Atlantic/Reykjavik"
        | "Atlantic/South_Georgia"
        | "Atlantic/St_Helena"
        | "Atlantic/Stanley"
        | "Australia/Adelaide"
        | "Australia/Brisbane"
        | "Australia/Broken_Hill"
        | "Australia/Darwin"
        | "Australia/Eucla"
        | "Australia/Hobart"
        | "Australia/Lindeman"
        | "Australia/Lord_Howe"
        | "Australia/Melbourne"
        | "Australia/Perth"
        | "Australia/Sydney"
        | "Canada/Atlantic"
        | "Canada/Central"
        | "Canada/Eastern"
        | "Canada/Mountain"
        | "Canada/Newfoundland"
        | "Canada/Pacific"
        | "Europe/Amsterdam"
        | "Europe/Andorra"
        | "Europe/Astrakhan"
        | "Europe/Athens"
        | "Europe/Belgrade"
        | "Europe/Berlin"
        | "Europe/Bratislava"
        | "Europe/Brussels"
        | "Europe/Bucharest"
        | "Europe/Budapest"
        | "Europe/Busingen"
        | "Europe/Chisinau"
        | "Europe/Copenhagen"
        | "Europe/Dublin"
        | "Europe/Gibraltar"
        | "Europe/Guernsey"
        | "Europe/Helsinki"
        | "Europe/Isle_of_Man"
        | "Europe/Istanbul"
        | "Europe/Jersey"
        | "Europe/Kaliningrad"
        | "Europe/Kiev"
        | "Europe/Kirov"
        | "Europe/Lisbon"
        | "Europe/Ljubljana"
        | "Europe/London"
        | "Europe/Luxembourg"
        | "Europe/Madrid"
        | "Europe/Malta"
        | "Europe/Mariehamn"
        | "Europe/Minsk"
        | "Europe/Monaco"
        | "Europe/Moscow"
        | "Europe/Oslo"
        | "Europe/Paris"
        | "Europe/Podgorica"
        | "Europe/Prague"
        | "Europe/Riga"
        | "Europe/Rome"
        | "Europe/Samara"
        | "Europe/San_Marino"
        | "Europe/Sarajevo"
        | "Europe/Saratov"
        | "Europe/Simferopol"
        | "Europe/Skopje"
        | "Europe/Sofia"
        | "Europe/Stockholm"
        | "Europe/Tallinn"
        | "Europe/Tirane"
        | "Europe/Ulyanovsk"
        | "Europe/Uzhgorod"
        | "Europe/Vaduz"
        | "Europe/Vatican"
        | "Europe/Vienna"
        | "Europe/Vilnius"
        | "Europe/Volgograd"
        | "Europe/Warsaw"
        | "Europe/Zagreb"
        | "Europe/Zaporozhye"
        | "Europe/Zurich"
        | "GMT"
        | "Indian/Antananarivo"
        | "Indian/Chagos"
        | "Indian/Christmas"
        | "Indian/Cocos"
        | "Indian/Comoro"
        | "Indian/Kerguelen"
        | "Indian/Mahe"
        | "Indian/Maldives"
        | "Indian/Mauritius"
        | "Indian/Mayotte"
        | "Indian/Reunion"
        | "Pacific/Apia"
        | "Pacific/Auckland"
        | "Pacific/Bougainville"
        | "Pacific/Chatham"
        | "Pacific/Chuuk"
        | "Pacific/Easter"
        | "Pacific/Efate"
        | "Pacific/Enderbury"
        | "Pacific/Fakaofo"
        | "Pacific/Fiji"
        | "Pacific/Funafuti"
        | "Pacific/Galapagos"
        | "Pacific/Gambier"
        | "Pacific/Guadalcanal"
        | "Pacific/Guam"
        | "Pacific/Honolulu"
        | "Pacific/Kiritimati"
        | "Pacific/Kosrae"
        | "Pacific/Kwajalein"
        | "Pacific/Majuro"
        | "Pacific/Marquesas"
        | "Pacific/Midway"
        | "Pacific/Nauru"
        | "Pacific/Niue"
        | "Pacific/Norfolk"
        | "Pacific/Noumea"
        | "Pacific/Pago_Pago"
        | "Pacific/Palau"
        | "Pacific/Pitcairn"
        | "Pacific/Pohnpei"
        | "Pacific/Port_Moresby"
        | "Pacific/Rarotonga"
        | "Pacific/Saipan"
        | "Pacific/Tahiti"
        | "Pacific/Tarawa"
        | "Pacific/Tongatapu"
        | "Pacific/Wake"
        | "Pacific/Wallis"
        | "US/Alaska"
        | "US/Arizona"
        | "US/Central"
        | "US/Eastern"
        | "US/Hawaii"
        | "US/Mountain"
        | "US/Pacific"
        | "UTC";
      data_attributes?: { [key: string]: unknown };
      person_display_name_properties?: string[] | null;
      correlation_config?: { [key: string]: unknown } | null;
      session_recording_opt_in?: boolean;
      capture_console_log_opt_in?: boolean | null;
      /** @enum {integer|null} */
      effective_membership_level?: (1 | 8 | 15) | null;
      access_control?: boolean;
      has_group_types?: boolean;
      primary_dashboard?: number | null;
      live_events_columns?: string[] | null;
      recording_domains?: (string | null)[] | null;
    };
    Person: {
      id?: number;
      name?: string;
      distinct_ids?: string[];
      properties?: { [key: string]: unknown };
      /** Format: date-time */
      created_at?: string;
      /** Format: uuid */
      uuid?: string;
    };
    Plugin: {
      id?: number;
      /** @enum {string|null} */
      plugin_type?:
        | ("local" | "custom" | "repository" | "source" | "" | null)
        | null;
      name?: string | null;
      description?: string | null;
      url?: string | null;
      icon?: string | null;
      config_schema?: { [key: string]: unknown };
      tag?: string | null;
      latest_tag?: string;
      is_global?: boolean;
      /** Format: uuid */
      organization_id?: string;
      organization_name?: string;
      capabilities?: { [key: string]: unknown };
      metrics?: { [key: string]: unknown } | null;
      public_jobs?: { [key: string]: unknown } | null;
    };
    PluginConfig: {
      id?: number;
      plugin: number;
      enabled?: boolean;
      order: number;
      config?: string;
      error?: { [key: string]: unknown } | null;
      team_id?: number | null;
      plugin_info?: string;
      delivery_rate_24h?: string;
      /** Format: date-time */
      created_at?: string;
    };
    /**
     * @description A `DataclassSerializer` is just a regular `Serializer`, except that:
     *
     * * A set of default fields are automatically populated.
     * * A set of default validators are automatically populated.
     * * Default `.create()` and `.update()` implementations are provided.
     *
     * The process of automatically determining a set of serializer fields based on the dataclass fields is slightly
     * complex, but you almost certainly don't need to dig into the implementation.
     *
     * If the `DataclassSerializer` class *doesn't* generate the set of fields that you need you should either declare the
     * extra/differing fields explicitly on the serializer class, or simply use a `Serializer` class.
     */
    PluginLogEntry: {
      /** Format: uuid */
      id: string;
      team_id: number;
      plugin_id: number;
      plugin_config_id: number;
      /** Format: date-time */
      timestamp: string;
      /** @enum {string} */
      source: "SYSTEM" | "PLUGIN" | "CONSOLE";
      /** @enum {string} */
      type: "DEBUG" | "LOG" | "INFO" | "WARN" | "ERROR";
      message: string;
      /** Format: uuid */
      instance_id: string;
    };
    PromptSequenceState: {
      key: string;
      /** Format: date-time */
      last_updated_at?: string;
      step?: number;
      completed?: boolean;
      dismissed?: boolean;
    };
    Property: {
      /**
       * @description
       *  You can use a simplified version:
       * ```json
       * {
       *     "properties": [
       *         {
       *             "key": "email",
       *             "value": "x@y.com",
       *             "operator": "exact",
       *             "type": "event"
       *         }
       *     ]
       * }
       * ```
       *
       * Or you can create more complicated queries with AND and OR:
       * ```json
       * {
       *     "properties": {
       *         "type": "AND",
       *         "values": [
       *             {
       *                 "type": "OR",
       *                 "values": [
       *                     {"key": "email", ...},
       *                     {"key": "email", ...}
       *                 ]
       *             },
       *             {
       *                 "type": "AND",
       *                 "values": [
       *                     {"key": "email", ...},
       *                     {"key": "email", ...}
       *                 ]
       *             }
       *         ]
       *     ]
       * }
       * ```
       *
       * @default AND
       * @enum {string}
       */
      type?: "AND" | "OR";
      values: components["schemas"]["PropertyItem"][];
    };
    /** @description Serializer mixin that resolves appropriate response for tags depending on license. */
    PropertyDefinition: {
      /** Format: uuid */
      id?: string;
      name: string;
      is_numerical?: boolean;
      query_usage_30_day?: number | null;
      /** @enum {string|null} */
      property_type?:
        | ("DateTime" | "String" | "Numeric" | "Boolean" | "" | null)
        | null;
      tags?: unknown[];
      is_event_property?: string;
    };
    PropertyItem: {
      /** @description Key of the property you're filtering on. For example `email` or `$current_url` */
      key: string;
      /** @description Value of your filter. For example `test@example.com` or `https://example.com/test/`. Can be an array for an OR query, like `["test@example.com","ok@example.com"]` */
      value: string;
      /**
       * @default exact
       * @enum {string|null}
       */
      operator?:
        | (
            | "exact"
            | "is_not"
            | "icontains"
            | "not_icontains"
            | "regex"
            | "not_regex"
            | "gt"
            | "lt"
            | "gte"
            | "lte"
            | "is_set"
            | "is_not_set"
            | "is_date_exact"
            | "is_date_after"
            | "is_date_before"
            | ""
            | null
          )
        | null;
      /**
       * @default event
       * @enum {string}
       */
      type?:
        | "event"
        | "person"
        | "cohort"
        | "element"
        | "static-cohort"
        | "precalculated-cohort"
        | "group"
        | "recording"
        | "behavioral"
        | "session"
        | "";
    };
    /** @description Standard Subscription serializer. */
    Subscription: {
      id?: number;
      dashboard?: number | null;
      insight?: number | null;
      /** @enum {string} */
      target_type: "email" | "slack" | "webhook";
      target_value: string;
      /** @enum {string} */
      frequency: "daily" | "weekly" | "monthly" | "yearly";
      interval?: number;
      byweekday?:
        | (
            | "monday"
            | "tuesday"
            | "wednesday"
            | "thursday"
            | "friday"
            | "saturday"
            | "sunday"
          )[]
        | null;
      bysetpos?: number | null;
      count?: number | null;
      /** Format: date-time */
      start_date: string;
      /** Format: date-time */
      until_date?: string | null;
      /** Format: date-time */
      created_at?: string;
      created_by?: components["schemas"]["UserBasic"];
      deleted?: boolean;
      title?: string | null;
      summary?: string;
      /** Format: date-time */
      next_delivery_date?: string;
      invite_message?: string | null;
    };
    Team: {
      id?: number;
      /** Format: uuid */
      uuid?: string;
      /** Format: uuid */
      organization?: string;
      api_token?: string;
      app_urls?: (string | null)[];
      name?: string;
      slack_incoming_webhook?: string | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      anonymize_ips?: boolean;
      completed_snippet_onboarding?: boolean;
      ingested_event?: boolean;
      test_account_filters?: { [key: string]: unknown };
      test_account_filters_default_checked?: boolean | null;
      path_cleaning_filters?: { [key: string]: unknown } | null;
      is_demo?: boolean;
      /** @enum {string} */
      timezone?:
        | "Africa/Abidjan"
        | "Africa/Accra"
        | "Africa/Addis_Ababa"
        | "Africa/Algiers"
        | "Africa/Asmara"
        | "Africa/Bamako"
        | "Africa/Bangui"
        | "Africa/Banjul"
        | "Africa/Bissau"
        | "Africa/Blantyre"
        | "Africa/Brazzaville"
        | "Africa/Bujumbura"
        | "Africa/Cairo"
        | "Africa/Casablanca"
        | "Africa/Ceuta"
        | "Africa/Conakry"
        | "Africa/Dakar"
        | "Africa/Dar_es_Salaam"
        | "Africa/Djibouti"
        | "Africa/Douala"
        | "Africa/El_Aaiun"
        | "Africa/Freetown"
        | "Africa/Gaborone"
        | "Africa/Harare"
        | "Africa/Johannesburg"
        | "Africa/Juba"
        | "Africa/Kampala"
        | "Africa/Khartoum"
        | "Africa/Kigali"
        | "Africa/Kinshasa"
        | "Africa/Lagos"
        | "Africa/Libreville"
        | "Africa/Lome"
        | "Africa/Luanda"
        | "Africa/Lubumbashi"
        | "Africa/Lusaka"
        | "Africa/Malabo"
        | "Africa/Maputo"
        | "Africa/Maseru"
        | "Africa/Mbabane"
        | "Africa/Mogadishu"
        | "Africa/Monrovia"
        | "Africa/Nairobi"
        | "Africa/Ndjamena"
        | "Africa/Niamey"
        | "Africa/Nouakchott"
        | "Africa/Ouagadougou"
        | "Africa/Porto-Novo"
        | "Africa/Sao_Tome"
        | "Africa/Tripoli"
        | "Africa/Tunis"
        | "Africa/Windhoek"
        | "America/Adak"
        | "America/Anchorage"
        | "America/Anguilla"
        | "America/Antigua"
        | "America/Araguaina"
        | "America/Argentina/Buenos_Aires"
        | "America/Argentina/Catamarca"
        | "America/Argentina/Cordoba"
        | "America/Argentina/Jujuy"
        | "America/Argentina/La_Rioja"
        | "America/Argentina/Mendoza"
        | "America/Argentina/Rio_Gallegos"
        | "America/Argentina/Salta"
        | "America/Argentina/San_Juan"
        | "America/Argentina/San_Luis"
        | "America/Argentina/Tucuman"
        | "America/Argentina/Ushuaia"
        | "America/Aruba"
        | "America/Asuncion"
        | "America/Atikokan"
        | "America/Bahia"
        | "America/Bahia_Banderas"
        | "America/Barbados"
        | "America/Belem"
        | "America/Belize"
        | "America/Blanc-Sablon"
        | "America/Boa_Vista"
        | "America/Bogota"
        | "America/Boise"
        | "America/Cambridge_Bay"
        | "America/Campo_Grande"
        | "America/Cancun"
        | "America/Caracas"
        | "America/Cayenne"
        | "America/Cayman"
        | "America/Chicago"
        | "America/Chihuahua"
        | "America/Costa_Rica"
        | "America/Creston"
        | "America/Cuiaba"
        | "America/Curacao"
        | "America/Danmarkshavn"
        | "America/Dawson"
        | "America/Dawson_Creek"
        | "America/Denver"
        | "America/Detroit"
        | "America/Dominica"
        | "America/Edmonton"
        | "America/Eirunepe"
        | "America/El_Salvador"
        | "America/Fort_Nelson"
        | "America/Fortaleza"
        | "America/Glace_Bay"
        | "America/Goose_Bay"
        | "America/Grand_Turk"
        | "America/Grenada"
        | "America/Guadeloupe"
        | "America/Guatemala"
        | "America/Guayaquil"
        | "America/Guyana"
        | "America/Halifax"
        | "America/Havana"
        | "America/Hermosillo"
        | "America/Indiana/Indianapolis"
        | "America/Indiana/Knox"
        | "America/Indiana/Marengo"
        | "America/Indiana/Petersburg"
        | "America/Indiana/Tell_City"
        | "America/Indiana/Vevay"
        | "America/Indiana/Vincennes"
        | "America/Indiana/Winamac"
        | "America/Inuvik"
        | "America/Iqaluit"
        | "America/Jamaica"
        | "America/Juneau"
        | "America/Kentucky/Louisville"
        | "America/Kentucky/Monticello"
        | "America/Kralendijk"
        | "America/La_Paz"
        | "America/Lima"
        | "America/Los_Angeles"
        | "America/Lower_Princes"
        | "America/Maceio"
        | "America/Managua"
        | "America/Manaus"
        | "America/Marigot"
        | "America/Martinique"
        | "America/Matamoros"
        | "America/Mazatlan"
        | "America/Menominee"
        | "America/Merida"
        | "America/Metlakatla"
        | "America/Mexico_City"
        | "America/Miquelon"
        | "America/Moncton"
        | "America/Monterrey"
        | "America/Montevideo"
        | "America/Montserrat"
        | "America/Nassau"
        | "America/New_York"
        | "America/Nipigon"
        | "America/Nome"
        | "America/Noronha"
        | "America/North_Dakota/Beulah"
        | "America/North_Dakota/Center"
        | "America/North_Dakota/New_Salem"
        | "America/Nuuk"
        | "America/Ojinaga"
        | "America/Panama"
        | "America/Pangnirtung"
        | "America/Paramaribo"
        | "America/Phoenix"
        | "America/Port-au-Prince"
        | "America/Port_of_Spain"
        | "America/Porto_Velho"
        | "America/Puerto_Rico"
        | "America/Punta_Arenas"
        | "America/Rainy_River"
        | "America/Rankin_Inlet"
        | "America/Recife"
        | "America/Regina"
        | "America/Resolute"
        | "America/Rio_Branco"
        | "America/Santarem"
        | "America/Santiago"
        | "America/Santo_Domingo"
        | "America/Sao_Paulo"
        | "America/Scoresbysund"
        | "America/Sitka"
        | "America/St_Barthelemy"
        | "America/St_Johns"
        | "America/St_Kitts"
        | "America/St_Lucia"
        | "America/St_Thomas"
        | "America/St_Vincent"
        | "America/Swift_Current"
        | "America/Tegucigalpa"
        | "America/Thule"
        | "America/Thunder_Bay"
        | "America/Tijuana"
        | "America/Toronto"
        | "America/Tortola"
        | "America/Vancouver"
        | "America/Whitehorse"
        | "America/Winnipeg"
        | "America/Yakutat"
        | "America/Yellowknife"
        | "Antarctica/Casey"
        | "Antarctica/Davis"
        | "Antarctica/DumontDUrville"
        | "Antarctica/Macquarie"
        | "Antarctica/Mawson"
        | "Antarctica/McMurdo"
        | "Antarctica/Palmer"
        | "Antarctica/Rothera"
        | "Antarctica/Syowa"
        | "Antarctica/Troll"
        | "Antarctica/Vostok"
        | "Arctic/Longyearbyen"
        | "Asia/Aden"
        | "Asia/Almaty"
        | "Asia/Amman"
        | "Asia/Anadyr"
        | "Asia/Aqtau"
        | "Asia/Aqtobe"
        | "Asia/Ashgabat"
        | "Asia/Atyrau"
        | "Asia/Baghdad"
        | "Asia/Bahrain"
        | "Asia/Baku"
        | "Asia/Bangkok"
        | "Asia/Barnaul"
        | "Asia/Beirut"
        | "Asia/Bishkek"
        | "Asia/Brunei"
        | "Asia/Chita"
        | "Asia/Choibalsan"
        | "Asia/Colombo"
        | "Asia/Damascus"
        | "Asia/Dhaka"
        | "Asia/Dili"
        | "Asia/Dubai"
        | "Asia/Dushanbe"
        | "Asia/Famagusta"
        | "Asia/Gaza"
        | "Asia/Hebron"
        | "Asia/Ho_Chi_Minh"
        | "Asia/Hong_Kong"
        | "Asia/Hovd"
        | "Asia/Irkutsk"
        | "Asia/Jakarta"
        | "Asia/Jayapura"
        | "Asia/Jerusalem"
        | "Asia/Kabul"
        | "Asia/Kamchatka"
        | "Asia/Karachi"
        | "Asia/Kathmandu"
        | "Asia/Khandyga"
        | "Asia/Kolkata"
        | "Asia/Krasnoyarsk"
        | "Asia/Kuala_Lumpur"
        | "Asia/Kuching"
        | "Asia/Kuwait"
        | "Asia/Macau"
        | "Asia/Magadan"
        | "Asia/Makassar"
        | "Asia/Manila"
        | "Asia/Muscat"
        | "Asia/Nicosia"
        | "Asia/Novokuznetsk"
        | "Asia/Novosibirsk"
        | "Asia/Omsk"
        | "Asia/Oral"
        | "Asia/Phnom_Penh"
        | "Asia/Pontianak"
        | "Asia/Pyongyang"
        | "Asia/Qatar"
        | "Asia/Qostanay"
        | "Asia/Qyzylorda"
        | "Asia/Riyadh"
        | "Asia/Sakhalin"
        | "Asia/Samarkand"
        | "Asia/Seoul"
        | "Asia/Shanghai"
        | "Asia/Singapore"
        | "Asia/Srednekolymsk"
        | "Asia/Taipei"
        | "Asia/Tashkent"
        | "Asia/Tbilisi"
        | "Asia/Tehran"
        | "Asia/Thimphu"
        | "Asia/Tokyo"
        | "Asia/Tomsk"
        | "Asia/Ulaanbaatar"
        | "Asia/Urumqi"
        | "Asia/Ust-Nera"
        | "Asia/Vientiane"
        | "Asia/Vladivostok"
        | "Asia/Yakutsk"
        | "Asia/Yangon"
        | "Asia/Yekaterinburg"
        | "Asia/Yerevan"
        | "Atlantic/Azores"
        | "Atlantic/Bermuda"
        | "Atlantic/Canary"
        | "Atlantic/Cape_Verde"
        | "Atlantic/Faroe"
        | "Atlantic/Madeira"
        | "Atlantic/Reykjavik"
        | "Atlantic/South_Georgia"
        | "Atlantic/St_Helena"
        | "Atlantic/Stanley"
        | "Australia/Adelaide"
        | "Australia/Brisbane"
        | "Australia/Broken_Hill"
        | "Australia/Darwin"
        | "Australia/Eucla"
        | "Australia/Hobart"
        | "Australia/Lindeman"
        | "Australia/Lord_Howe"
        | "Australia/Melbourne"
        | "Australia/Perth"
        | "Australia/Sydney"
        | "Canada/Atlantic"
        | "Canada/Central"
        | "Canada/Eastern"
        | "Canada/Mountain"
        | "Canada/Newfoundland"
        | "Canada/Pacific"
        | "Europe/Amsterdam"
        | "Europe/Andorra"
        | "Europe/Astrakhan"
        | "Europe/Athens"
        | "Europe/Belgrade"
        | "Europe/Berlin"
        | "Europe/Bratislava"
        | "Europe/Brussels"
        | "Europe/Bucharest"
        | "Europe/Budapest"
        | "Europe/Busingen"
        | "Europe/Chisinau"
        | "Europe/Copenhagen"
        | "Europe/Dublin"
        | "Europe/Gibraltar"
        | "Europe/Guernsey"
        | "Europe/Helsinki"
        | "Europe/Isle_of_Man"
        | "Europe/Istanbul"
        | "Europe/Jersey"
        | "Europe/Kaliningrad"
        | "Europe/Kiev"
        | "Europe/Kirov"
        | "Europe/Lisbon"
        | "Europe/Ljubljana"
        | "Europe/London"
        | "Europe/Luxembourg"
        | "Europe/Madrid"
        | "Europe/Malta"
        | "Europe/Mariehamn"
        | "Europe/Minsk"
        | "Europe/Monaco"
        | "Europe/Moscow"
        | "Europe/Oslo"
        | "Europe/Paris"
        | "Europe/Podgorica"
        | "Europe/Prague"
        | "Europe/Riga"
        | "Europe/Rome"
        | "Europe/Samara"
        | "Europe/San_Marino"
        | "Europe/Sarajevo"
        | "Europe/Saratov"
        | "Europe/Simferopol"
        | "Europe/Skopje"
        | "Europe/Sofia"
        | "Europe/Stockholm"
        | "Europe/Tallinn"
        | "Europe/Tirane"
        | "Europe/Ulyanovsk"
        | "Europe/Uzhgorod"
        | "Europe/Vaduz"
        | "Europe/Vatican"
        | "Europe/Vienna"
        | "Europe/Vilnius"
        | "Europe/Volgograd"
        | "Europe/Warsaw"
        | "Europe/Zagreb"
        | "Europe/Zaporozhye"
        | "Europe/Zurich"
        | "GMT"
        | "Indian/Antananarivo"
        | "Indian/Chagos"
        | "Indian/Christmas"
        | "Indian/Cocos"
        | "Indian/Comoro"
        | "Indian/Kerguelen"
        | "Indian/Mahe"
        | "Indian/Maldives"
        | "Indian/Mauritius"
        | "Indian/Mayotte"
        | "Indian/Reunion"
        | "Pacific/Apia"
        | "Pacific/Auckland"
        | "Pacific/Bougainville"
        | "Pacific/Chatham"
        | "Pacific/Chuuk"
        | "Pacific/Easter"
        | "Pacific/Efate"
        | "Pacific/Enderbury"
        | "Pacific/Fakaofo"
        | "Pacific/Fiji"
        | "Pacific/Funafuti"
        | "Pacific/Galapagos"
        | "Pacific/Gambier"
        | "Pacific/Guadalcanal"
        | "Pacific/Guam"
        | "Pacific/Honolulu"
        | "Pacific/Kiritimati"
        | "Pacific/Kosrae"
        | "Pacific/Kwajalein"
        | "Pacific/Majuro"
        | "Pacific/Marquesas"
        | "Pacific/Midway"
        | "Pacific/Nauru"
        | "Pacific/Niue"
        | "Pacific/Norfolk"
        | "Pacific/Noumea"
        | "Pacific/Pago_Pago"
        | "Pacific/Palau"
        | "Pacific/Pitcairn"
        | "Pacific/Pohnpei"
        | "Pacific/Port_Moresby"
        | "Pacific/Rarotonga"
        | "Pacific/Saipan"
        | "Pacific/Tahiti"
        | "Pacific/Tarawa"
        | "Pacific/Tongatapu"
        | "Pacific/Wake"
        | "Pacific/Wallis"
        | "US/Alaska"
        | "US/Arizona"
        | "US/Central"
        | "US/Eastern"
        | "US/Hawaii"
        | "US/Mountain"
        | "US/Pacific"
        | "UTC";
      data_attributes?: { [key: string]: unknown };
      person_display_name_properties?: string[] | null;
      correlation_config?: { [key: string]: unknown } | null;
      session_recording_opt_in?: boolean;
      capture_console_log_opt_in?: boolean | null;
      /** @enum {integer|null} */
      effective_membership_level?: (1 | 8 | 15) | null;
      access_control?: boolean;
      has_group_types?: boolean;
      primary_dashboard?: number | null;
      live_events_columns?: string[] | null;
      recording_domains?: (string | null)[] | null;
    };
    /**
     * @description Serializer for `Team` model with minimal attributes to speeed up loading and transfer times.
     * Also used for nested serializers.
     */
    TeamBasic: {
      id?: number;
      /** Format: uuid */
      uuid?: string;
      /** Format: uuid */
      organization: string;
      api_token?: string;
      name?: string;
      completed_snippet_onboarding?: boolean;
      ingested_event?: boolean;
      is_demo?: boolean;
      /** @enum {string} */
      timezone?:
        | "Africa/Abidjan"
        | "Africa/Accra"
        | "Africa/Addis_Ababa"
        | "Africa/Algiers"
        | "Africa/Asmara"
        | "Africa/Bamako"
        | "Africa/Bangui"
        | "Africa/Banjul"
        | "Africa/Bissau"
        | "Africa/Blantyre"
        | "Africa/Brazzaville"
        | "Africa/Bujumbura"
        | "Africa/Cairo"
        | "Africa/Casablanca"
        | "Africa/Ceuta"
        | "Africa/Conakry"
        | "Africa/Dakar"
        | "Africa/Dar_es_Salaam"
        | "Africa/Djibouti"
        | "Africa/Douala"
        | "Africa/El_Aaiun"
        | "Africa/Freetown"
        | "Africa/Gaborone"
        | "Africa/Harare"
        | "Africa/Johannesburg"
        | "Africa/Juba"
        | "Africa/Kampala"
        | "Africa/Khartoum"
        | "Africa/Kigali"
        | "Africa/Kinshasa"
        | "Africa/Lagos"
        | "Africa/Libreville"
        | "Africa/Lome"
        | "Africa/Luanda"
        | "Africa/Lubumbashi"
        | "Africa/Lusaka"
        | "Africa/Malabo"
        | "Africa/Maputo"
        | "Africa/Maseru"
        | "Africa/Mbabane"
        | "Africa/Mogadishu"
        | "Africa/Monrovia"
        | "Africa/Nairobi"
        | "Africa/Ndjamena"
        | "Africa/Niamey"
        | "Africa/Nouakchott"
        | "Africa/Ouagadougou"
        | "Africa/Porto-Novo"
        | "Africa/Sao_Tome"
        | "Africa/Tripoli"
        | "Africa/Tunis"
        | "Africa/Windhoek"
        | "America/Adak"
        | "America/Anchorage"
        | "America/Anguilla"
        | "America/Antigua"
        | "America/Araguaina"
        | "America/Argentina/Buenos_Aires"
        | "America/Argentina/Catamarca"
        | "America/Argentina/Cordoba"
        | "America/Argentina/Jujuy"
        | "America/Argentina/La_Rioja"
        | "America/Argentina/Mendoza"
        | "America/Argentina/Rio_Gallegos"
        | "America/Argentina/Salta"
        | "America/Argentina/San_Juan"
        | "America/Argentina/San_Luis"
        | "America/Argentina/Tucuman"
        | "America/Argentina/Ushuaia"
        | "America/Aruba"
        | "America/Asuncion"
        | "America/Atikokan"
        | "America/Bahia"
        | "America/Bahia_Banderas"
        | "America/Barbados"
        | "America/Belem"
        | "America/Belize"
        | "America/Blanc-Sablon"
        | "America/Boa_Vista"
        | "America/Bogota"
        | "America/Boise"
        | "America/Cambridge_Bay"
        | "America/Campo_Grande"
        | "America/Cancun"
        | "America/Caracas"
        | "America/Cayenne"
        | "America/Cayman"
        | "America/Chicago"
        | "America/Chihuahua"
        | "America/Costa_Rica"
        | "America/Creston"
        | "America/Cuiaba"
        | "America/Curacao"
        | "America/Danmarkshavn"
        | "America/Dawson"
        | "America/Dawson_Creek"
        | "America/Denver"
        | "America/Detroit"
        | "America/Dominica"
        | "America/Edmonton"
        | "America/Eirunepe"
        | "America/El_Salvador"
        | "America/Fort_Nelson"
        | "America/Fortaleza"
        | "America/Glace_Bay"
        | "America/Goose_Bay"
        | "America/Grand_Turk"
        | "America/Grenada"
        | "America/Guadeloupe"
        | "America/Guatemala"
        | "America/Guayaquil"
        | "America/Guyana"
        | "America/Halifax"
        | "America/Havana"
        | "America/Hermosillo"
        | "America/Indiana/Indianapolis"
        | "America/Indiana/Knox"
        | "America/Indiana/Marengo"
        | "America/Indiana/Petersburg"
        | "America/Indiana/Tell_City"
        | "America/Indiana/Vevay"
        | "America/Indiana/Vincennes"
        | "America/Indiana/Winamac"
        | "America/Inuvik"
        | "America/Iqaluit"
        | "America/Jamaica"
        | "America/Juneau"
        | "America/Kentucky/Louisville"
        | "America/Kentucky/Monticello"
        | "America/Kralendijk"
        | "America/La_Paz"
        | "America/Lima"
        | "America/Los_Angeles"
        | "America/Lower_Princes"
        | "America/Maceio"
        | "America/Managua"
        | "America/Manaus"
        | "America/Marigot"
        | "America/Martinique"
        | "America/Matamoros"
        | "America/Mazatlan"
        | "America/Menominee"
        | "America/Merida"
        | "America/Metlakatla"
        | "America/Mexico_City"
        | "America/Miquelon"
        | "America/Moncton"
        | "America/Monterrey"
        | "America/Montevideo"
        | "America/Montserrat"
        | "America/Nassau"
        | "America/New_York"
        | "America/Nipigon"
        | "America/Nome"
        | "America/Noronha"
        | "America/North_Dakota/Beulah"
        | "America/North_Dakota/Center"
        | "America/North_Dakota/New_Salem"
        | "America/Nuuk"
        | "America/Ojinaga"
        | "America/Panama"
        | "America/Pangnirtung"
        | "America/Paramaribo"
        | "America/Phoenix"
        | "America/Port-au-Prince"
        | "America/Port_of_Spain"
        | "America/Porto_Velho"
        | "America/Puerto_Rico"
        | "America/Punta_Arenas"
        | "America/Rainy_River"
        | "America/Rankin_Inlet"
        | "America/Recife"
        | "America/Regina"
        | "America/Resolute"
        | "America/Rio_Branco"
        | "America/Santarem"
        | "America/Santiago"
        | "America/Santo_Domingo"
        | "America/Sao_Paulo"
        | "America/Scoresbysund"
        | "America/Sitka"
        | "America/St_Barthelemy"
        | "America/St_Johns"
        | "America/St_Kitts"
        | "America/St_Lucia"
        | "America/St_Thomas"
        | "America/St_Vincent"
        | "America/Swift_Current"
        | "America/Tegucigalpa"
        | "America/Thule"
        | "America/Thunder_Bay"
        | "America/Tijuana"
        | "America/Toronto"
        | "America/Tortola"
        | "America/Vancouver"
        | "America/Whitehorse"
        | "America/Winnipeg"
        | "America/Yakutat"
        | "America/Yellowknife"
        | "Antarctica/Casey"
        | "Antarctica/Davis"
        | "Antarctica/DumontDUrville"
        | "Antarctica/Macquarie"
        | "Antarctica/Mawson"
        | "Antarctica/McMurdo"
        | "Antarctica/Palmer"
        | "Antarctica/Rothera"
        | "Antarctica/Syowa"
        | "Antarctica/Troll"
        | "Antarctica/Vostok"
        | "Arctic/Longyearbyen"
        | "Asia/Aden"
        | "Asia/Almaty"
        | "Asia/Amman"
        | "Asia/Anadyr"
        | "Asia/Aqtau"
        | "Asia/Aqtobe"
        | "Asia/Ashgabat"
        | "Asia/Atyrau"
        | "Asia/Baghdad"
        | "Asia/Bahrain"
        | "Asia/Baku"
        | "Asia/Bangkok"
        | "Asia/Barnaul"
        | "Asia/Beirut"
        | "Asia/Bishkek"
        | "Asia/Brunei"
        | "Asia/Chita"
        | "Asia/Choibalsan"
        | "Asia/Colombo"
        | "Asia/Damascus"
        | "Asia/Dhaka"
        | "Asia/Dili"
        | "Asia/Dubai"
        | "Asia/Dushanbe"
        | "Asia/Famagusta"
        | "Asia/Gaza"
        | "Asia/Hebron"
        | "Asia/Ho_Chi_Minh"
        | "Asia/Hong_Kong"
        | "Asia/Hovd"
        | "Asia/Irkutsk"
        | "Asia/Jakarta"
        | "Asia/Jayapura"
        | "Asia/Jerusalem"
        | "Asia/Kabul"
        | "Asia/Kamchatka"
        | "Asia/Karachi"
        | "Asia/Kathmandu"
        | "Asia/Khandyga"
        | "Asia/Kolkata"
        | "Asia/Krasnoyarsk"
        | "Asia/Kuala_Lumpur"
        | "Asia/Kuching"
        | "Asia/Kuwait"
        | "Asia/Macau"
        | "Asia/Magadan"
        | "Asia/Makassar"
        | "Asia/Manila"
        | "Asia/Muscat"
        | "Asia/Nicosia"
        | "Asia/Novokuznetsk"
        | "Asia/Novosibirsk"
        | "Asia/Omsk"
        | "Asia/Oral"
        | "Asia/Phnom_Penh"
        | "Asia/Pontianak"
        | "Asia/Pyongyang"
        | "Asia/Qatar"
        | "Asia/Qostanay"
        | "Asia/Qyzylorda"
        | "Asia/Riyadh"
        | "Asia/Sakhalin"
        | "Asia/Samarkand"
        | "Asia/Seoul"
        | "Asia/Shanghai"
        | "Asia/Singapore"
        | "Asia/Srednekolymsk"
        | "Asia/Taipei"
        | "Asia/Tashkent"
        | "Asia/Tbilisi"
        | "Asia/Tehran"
        | "Asia/Thimphu"
        | "Asia/Tokyo"
        | "Asia/Tomsk"
        | "Asia/Ulaanbaatar"
        | "Asia/Urumqi"
        | "Asia/Ust-Nera"
        | "Asia/Vientiane"
        | "Asia/Vladivostok"
        | "Asia/Yakutsk"
        | "Asia/Yangon"
        | "Asia/Yekaterinburg"
        | "Asia/Yerevan"
        | "Atlantic/Azores"
        | "Atlantic/Bermuda"
        | "Atlantic/Canary"
        | "Atlantic/Cape_Verde"
        | "Atlantic/Faroe"
        | "Atlantic/Madeira"
        | "Atlantic/Reykjavik"
        | "Atlantic/South_Georgia"
        | "Atlantic/St_Helena"
        | "Atlantic/Stanley"
        | "Australia/Adelaide"
        | "Australia/Brisbane"
        | "Australia/Broken_Hill"
        | "Australia/Darwin"
        | "Australia/Eucla"
        | "Australia/Hobart"
        | "Australia/Lindeman"
        | "Australia/Lord_Howe"
        | "Australia/Melbourne"
        | "Australia/Perth"
        | "Australia/Sydney"
        | "Canada/Atlantic"
        | "Canada/Central"
        | "Canada/Eastern"
        | "Canada/Mountain"
        | "Canada/Newfoundland"
        | "Canada/Pacific"
        | "Europe/Amsterdam"
        | "Europe/Andorra"
        | "Europe/Astrakhan"
        | "Europe/Athens"
        | "Europe/Belgrade"
        | "Europe/Berlin"
        | "Europe/Bratislava"
        | "Europe/Brussels"
        | "Europe/Bucharest"
        | "Europe/Budapest"
        | "Europe/Busingen"
        | "Europe/Chisinau"
        | "Europe/Copenhagen"
        | "Europe/Dublin"
        | "Europe/Gibraltar"
        | "Europe/Guernsey"
        | "Europe/Helsinki"
        | "Europe/Isle_of_Man"
        | "Europe/Istanbul"
        | "Europe/Jersey"
        | "Europe/Kaliningrad"
        | "Europe/Kiev"
        | "Europe/Kirov"
        | "Europe/Lisbon"
        | "Europe/Ljubljana"
        | "Europe/London"
        | "Europe/Luxembourg"
        | "Europe/Madrid"
        | "Europe/Malta"
        | "Europe/Mariehamn"
        | "Europe/Minsk"
        | "Europe/Monaco"
        | "Europe/Moscow"
        | "Europe/Oslo"
        | "Europe/Paris"
        | "Europe/Podgorica"
        | "Europe/Prague"
        | "Europe/Riga"
        | "Europe/Rome"
        | "Europe/Samara"
        | "Europe/San_Marino"
        | "Europe/Sarajevo"
        | "Europe/Saratov"
        | "Europe/Simferopol"
        | "Europe/Skopje"
        | "Europe/Sofia"
        | "Europe/Stockholm"
        | "Europe/Tallinn"
        | "Europe/Tirane"
        | "Europe/Ulyanovsk"
        | "Europe/Uzhgorod"
        | "Europe/Vaduz"
        | "Europe/Vatican"
        | "Europe/Vienna"
        | "Europe/Vilnius"
        | "Europe/Volgograd"
        | "Europe/Warsaw"
        | "Europe/Zagreb"
        | "Europe/Zaporozhye"
        | "Europe/Zurich"
        | "GMT"
        | "Indian/Antananarivo"
        | "Indian/Chagos"
        | "Indian/Christmas"
        | "Indian/Cocos"
        | "Indian/Comoro"
        | "Indian/Kerguelen"
        | "Indian/Mahe"
        | "Indian/Maldives"
        | "Indian/Mauritius"
        | "Indian/Mayotte"
        | "Indian/Reunion"
        | "Pacific/Apia"
        | "Pacific/Auckland"
        | "Pacific/Bougainville"
        | "Pacific/Chatham"
        | "Pacific/Chuuk"
        | "Pacific/Easter"
        | "Pacific/Efate"
        | "Pacific/Enderbury"
        | "Pacific/Fakaofo"
        | "Pacific/Fiji"
        | "Pacific/Funafuti"
        | "Pacific/Galapagos"
        | "Pacific/Gambier"
        | "Pacific/Guadalcanal"
        | "Pacific/Guam"
        | "Pacific/Honolulu"
        | "Pacific/Kiritimati"
        | "Pacific/Kosrae"
        | "Pacific/Kwajalein"
        | "Pacific/Majuro"
        | "Pacific/Marquesas"
        | "Pacific/Midway"
        | "Pacific/Nauru"
        | "Pacific/Niue"
        | "Pacific/Norfolk"
        | "Pacific/Noumea"
        | "Pacific/Pago_Pago"
        | "Pacific/Palau"
        | "Pacific/Pitcairn"
        | "Pacific/Pohnpei"
        | "Pacific/Port_Moresby"
        | "Pacific/Rarotonga"
        | "Pacific/Saipan"
        | "Pacific/Tahiti"
        | "Pacific/Tarawa"
        | "Pacific/Tongatapu"
        | "Pacific/Wake"
        | "Pacific/Wallis"
        | "US/Alaska"
        | "US/Arizona"
        | "US/Central"
        | "US/Eastern"
        | "US/Hawaii"
        | "US/Mountain"
        | "US/Pacific"
        | "UTC";
      access_control?: boolean;
      /** @enum {integer|null} */
      effective_membership_level?: (1 | 8 | 15) | null;
    };
    Trend: {
      /** @description Events to filter on. One of `events` or `actions` is required. */
      events?: components["schemas"]["FilterEvent"][];
      /** @description Actions to filter on. One of `events` or `actions` is required. */
      actions?: components["schemas"]["FilterAction"][];
      /** @description Filter events by event property, person property, cohort, groups and more. */
      properties?: components["schemas"]["Property"];
      /**
       * @description Whether to filter out internal and test accounts. See "project settings" in your PostHog account for the filters.
       * @default false
       */
      filter_test_accounts?: boolean;
      /**
       * @description What date to filter the results from. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year.
       * @default -7d
       */
      date_from?: string;
      /**
       * @description What date to filter the results to. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year.
       * @default -7d
       */
      date_to?: string;
      /**
       * @description A property or cohort to break down on. You can select the type of the property with breakdown_type.
       * - `event` (default): a property key
       * - `person`: a person property key
       * - `cohort`: an array of cohort IDs (ie `[9581,5812]`)
       */
      breakdown?: string;
      /**
       * @description Type of property to break down on.
       * @default event
       * @enum {string}
       */
      breakdown_type?: "event" | "person" | "cohort" | "group" | "session";
      /**
       * @description How to display the data. Will change how the data is returned.
       * @default ActionsLineGraph
       * @enum {string}
       */
      display?:
        | "ActionsLineGraph"
        | "ActionsLineGraphCumulative"
        | "ActionsTable"
        | "ActionsPie"
        | "ActionsBar"
        | "ActionsBarValue"
        | "WorldMap"
        | "BoldNumber";
      /** @description Combine the result of events or actions into a single number. For example `A + B` or `(A-B)/B`. The letters correspond to the order of the `events` or `actions` lists. */
      formula?: string;
      /** @description For each returned result show the current period and the previous period. The result will contain `compare:true` and a `compare_label` with either `current` or `previous`. */
      compare?: boolean;
    };
    TrendResult: {
      /** @description The requested counts. */
      data: number[];
      /** @description The dates corresponding to the data field above. */
      days: string[];
      /** @description The dates corresponding to the data field above. */
      labels: string[];
      /** @description The insight that's being returned. */
      filter: components["schemas"]["GenericInsights"];
      /**
       * @description A label describing this result. Will include
       * - The event or action
       * - Breakdown value
       * - If `compare:true`, whether it's `current` or `previous`
       */
      label: string;
    };
    TrendResults: {
      /** @description Whether the result is cached. To force a refresh, pass ?refresh=true */
      is_cached: boolean;
      /**
       * Format: date-time
       * @description If the result is cached, when it was last refreshed.
       */
      last_refresh: string;
      /**
       * @description Timezone the chart is displayed in
       * @default UTC
       * @enum {string}
       */
      timezone?:
        | "Africa/Abidjan"
        | "Africa/Accra"
        | "Africa/Addis_Ababa"
        | "Africa/Algiers"
        | "Africa/Asmara"
        | "Africa/Bamako"
        | "Africa/Bangui"
        | "Africa/Banjul"
        | "Africa/Bissau"
        | "Africa/Blantyre"
        | "Africa/Brazzaville"
        | "Africa/Bujumbura"
        | "Africa/Cairo"
        | "Africa/Casablanca"
        | "Africa/Ceuta"
        | "Africa/Conakry"
        | "Africa/Dakar"
        | "Africa/Dar_es_Salaam"
        | "Africa/Djibouti"
        | "Africa/Douala"
        | "Africa/El_Aaiun"
        | "Africa/Freetown"
        | "Africa/Gaborone"
        | "Africa/Harare"
        | "Africa/Johannesburg"
        | "Africa/Juba"
        | "Africa/Kampala"
        | "Africa/Khartoum"
        | "Africa/Kigali"
        | "Africa/Kinshasa"
        | "Africa/Lagos"
        | "Africa/Libreville"
        | "Africa/Lome"
        | "Africa/Luanda"
        | "Africa/Lubumbashi"
        | "Africa/Lusaka"
        | "Africa/Malabo"
        | "Africa/Maputo"
        | "Africa/Maseru"
        | "Africa/Mbabane"
        | "Africa/Mogadishu"
        | "Africa/Monrovia"
        | "Africa/Nairobi"
        | "Africa/Ndjamena"
        | "Africa/Niamey"
        | "Africa/Nouakchott"
        | "Africa/Ouagadougou"
        | "Africa/Porto-Novo"
        | "Africa/Sao_Tome"
        | "Africa/Tripoli"
        | "Africa/Tunis"
        | "Africa/Windhoek"
        | "America/Adak"
        | "America/Anchorage"
        | "America/Anguilla"
        | "America/Antigua"
        | "America/Araguaina"
        | "America/Argentina/Buenos_Aires"
        | "America/Argentina/Catamarca"
        | "America/Argentina/Cordoba"
        | "America/Argentina/Jujuy"
        | "America/Argentina/La_Rioja"
        | "America/Argentina/Mendoza"
        | "America/Argentina/Rio_Gallegos"
        | "America/Argentina/Salta"
        | "America/Argentina/San_Juan"
        | "America/Argentina/San_Luis"
        | "America/Argentina/Tucuman"
        | "America/Argentina/Ushuaia"
        | "America/Aruba"
        | "America/Asuncion"
        | "America/Atikokan"
        | "America/Bahia"
        | "America/Bahia_Banderas"
        | "America/Barbados"
        | "America/Belem"
        | "America/Belize"
        | "America/Blanc-Sablon"
        | "America/Boa_Vista"
        | "America/Bogota"
        | "America/Boise"
        | "America/Cambridge_Bay"
        | "America/Campo_Grande"
        | "America/Cancun"
        | "America/Caracas"
        | "America/Cayenne"
        | "America/Cayman"
        | "America/Chicago"
        | "America/Chihuahua"
        | "America/Costa_Rica"
        | "America/Creston"
        | "America/Cuiaba"
        | "America/Curacao"
        | "America/Danmarkshavn"
        | "America/Dawson"
        | "America/Dawson_Creek"
        | "America/Denver"
        | "America/Detroit"
        | "America/Dominica"
        | "America/Edmonton"
        | "America/Eirunepe"
        | "America/El_Salvador"
        | "America/Fort_Nelson"
        | "America/Fortaleza"
        | "America/Glace_Bay"
        | "America/Goose_Bay"
        | "America/Grand_Turk"
        | "America/Grenada"
        | "America/Guadeloupe"
        | "America/Guatemala"
        | "America/Guayaquil"
        | "America/Guyana"
        | "America/Halifax"
        | "America/Havana"
        | "America/Hermosillo"
        | "America/Indiana/Indianapolis"
        | "America/Indiana/Knox"
        | "America/Indiana/Marengo"
        | "America/Indiana/Petersburg"
        | "America/Indiana/Tell_City"
        | "America/Indiana/Vevay"
        | "America/Indiana/Vincennes"
        | "America/Indiana/Winamac"
        | "America/Inuvik"
        | "America/Iqaluit"
        | "America/Jamaica"
        | "America/Juneau"
        | "America/Kentucky/Louisville"
        | "America/Kentucky/Monticello"
        | "America/Kralendijk"
        | "America/La_Paz"
        | "America/Lima"
        | "America/Los_Angeles"
        | "America/Lower_Princes"
        | "America/Maceio"
        | "America/Managua"
        | "America/Manaus"
        | "America/Marigot"
        | "America/Martinique"
        | "America/Matamoros"
        | "America/Mazatlan"
        | "America/Menominee"
        | "America/Merida"
        | "America/Metlakatla"
        | "America/Mexico_City"
        | "America/Miquelon"
        | "America/Moncton"
        | "America/Monterrey"
        | "America/Montevideo"
        | "America/Montserrat"
        | "America/Nassau"
        | "America/New_York"
        | "America/Nipigon"
        | "America/Nome"
        | "America/Noronha"
        | "America/North_Dakota/Beulah"
        | "America/North_Dakota/Center"
        | "America/North_Dakota/New_Salem"
        | "America/Nuuk"
        | "America/Ojinaga"
        | "America/Panama"
        | "America/Pangnirtung"
        | "America/Paramaribo"
        | "America/Phoenix"
        | "America/Port-au-Prince"
        | "America/Port_of_Spain"
        | "America/Porto_Velho"
        | "America/Puerto_Rico"
        | "America/Punta_Arenas"
        | "America/Rainy_River"
        | "America/Rankin_Inlet"
        | "America/Recife"
        | "America/Regina"
        | "America/Resolute"
        | "America/Rio_Branco"
        | "America/Santarem"
        | "America/Santiago"
        | "America/Santo_Domingo"
        | "America/Sao_Paulo"
        | "America/Scoresbysund"
        | "America/Sitka"
        | "America/St_Barthelemy"
        | "America/St_Johns"
        | "America/St_Kitts"
        | "America/St_Lucia"
        | "America/St_Thomas"
        | "America/St_Vincent"
        | "America/Swift_Current"
        | "America/Tegucigalpa"
        | "America/Thule"
        | "America/Thunder_Bay"
        | "America/Tijuana"
        | "America/Toronto"
        | "America/Tortola"
        | "America/Vancouver"
        | "America/Whitehorse"
        | "America/Winnipeg"
        | "America/Yakutat"
        | "America/Yellowknife"
        | "Antarctica/Casey"
        | "Antarctica/Davis"
        | "Antarctica/DumontDUrville"
        | "Antarctica/Macquarie"
        | "Antarctica/Mawson"
        | "Antarctica/McMurdo"
        | "Antarctica/Palmer"
        | "Antarctica/Rothera"
        | "Antarctica/Syowa"
        | "Antarctica/Troll"
        | "Antarctica/Vostok"
        | "Arctic/Longyearbyen"
        | "Asia/Aden"
        | "Asia/Almaty"
        | "Asia/Amman"
        | "Asia/Anadyr"
        | "Asia/Aqtau"
        | "Asia/Aqtobe"
        | "Asia/Ashgabat"
        | "Asia/Atyrau"
        | "Asia/Baghdad"
        | "Asia/Bahrain"
        | "Asia/Baku"
        | "Asia/Bangkok"
        | "Asia/Barnaul"
        | "Asia/Beirut"
        | "Asia/Bishkek"
        | "Asia/Brunei"
        | "Asia/Chita"
        | "Asia/Choibalsan"
        | "Asia/Colombo"
        | "Asia/Damascus"
        | "Asia/Dhaka"
        | "Asia/Dili"
        | "Asia/Dubai"
        | "Asia/Dushanbe"
        | "Asia/Famagusta"
        | "Asia/Gaza"
        | "Asia/Hebron"
        | "Asia/Ho_Chi_Minh"
        | "Asia/Hong_Kong"
        | "Asia/Hovd"
        | "Asia/Irkutsk"
        | "Asia/Jakarta"
        | "Asia/Jayapura"
        | "Asia/Jerusalem"
        | "Asia/Kabul"
        | "Asia/Kamchatka"
        | "Asia/Karachi"
        | "Asia/Kathmandu"
        | "Asia/Khandyga"
        | "Asia/Kolkata"
        | "Asia/Krasnoyarsk"
        | "Asia/Kuala_Lumpur"
        | "Asia/Kuching"
        | "Asia/Kuwait"
        | "Asia/Macau"
        | "Asia/Magadan"
        | "Asia/Makassar"
        | "Asia/Manila"
        | "Asia/Muscat"
        | "Asia/Nicosia"
        | "Asia/Novokuznetsk"
        | "Asia/Novosibirsk"
        | "Asia/Omsk"
        | "Asia/Oral"
        | "Asia/Phnom_Penh"
        | "Asia/Pontianak"
        | "Asia/Pyongyang"
        | "Asia/Qatar"
        | "Asia/Qostanay"
        | "Asia/Qyzylorda"
        | "Asia/Riyadh"
        | "Asia/Sakhalin"
        | "Asia/Samarkand"
        | "Asia/Seoul"
        | "Asia/Shanghai"
        | "Asia/Singapore"
        | "Asia/Srednekolymsk"
        | "Asia/Taipei"
        | "Asia/Tashkent"
        | "Asia/Tbilisi"
        | "Asia/Tehran"
        | "Asia/Thimphu"
        | "Asia/Tokyo"
        | "Asia/Tomsk"
        | "Asia/Ulaanbaatar"
        | "Asia/Urumqi"
        | "Asia/Ust-Nera"
        | "Asia/Vientiane"
        | "Asia/Vladivostok"
        | "Asia/Yakutsk"
        | "Asia/Yangon"
        | "Asia/Yekaterinburg"
        | "Asia/Yerevan"
        | "Atlantic/Azores"
        | "Atlantic/Bermuda"
        | "Atlantic/Canary"
        | "Atlantic/Cape_Verde"
        | "Atlantic/Faroe"
        | "Atlantic/Madeira"
        | "Atlantic/Reykjavik"
        | "Atlantic/South_Georgia"
        | "Atlantic/St_Helena"
        | "Atlantic/Stanley"
        | "Australia/Adelaide"
        | "Australia/Brisbane"
        | "Australia/Broken_Hill"
        | "Australia/Darwin"
        | "Australia/Eucla"
        | "Australia/Hobart"
        | "Australia/Lindeman"
        | "Australia/Lord_Howe"
        | "Australia/Melbourne"
        | "Australia/Perth"
        | "Australia/Sydney"
        | "Canada/Atlantic"
        | "Canada/Central"
        | "Canada/Eastern"
        | "Canada/Mountain"
        | "Canada/Newfoundland"
        | "Canada/Pacific"
        | "Europe/Amsterdam"
        | "Europe/Andorra"
        | "Europe/Astrakhan"
        | "Europe/Athens"
        | "Europe/Belgrade"
        | "Europe/Berlin"
        | "Europe/Bratislava"
        | "Europe/Brussels"
        | "Europe/Bucharest"
        | "Europe/Budapest"
        | "Europe/Busingen"
        | "Europe/Chisinau"
        | "Europe/Copenhagen"
        | "Europe/Dublin"
        | "Europe/Gibraltar"
        | "Europe/Guernsey"
        | "Europe/Helsinki"
        | "Europe/Isle_of_Man"
        | "Europe/Istanbul"
        | "Europe/Jersey"
        | "Europe/Kaliningrad"
        | "Europe/Kiev"
        | "Europe/Kirov"
        | "Europe/Lisbon"
        | "Europe/Ljubljana"
        | "Europe/London"
        | "Europe/Luxembourg"
        | "Europe/Madrid"
        | "Europe/Malta"
        | "Europe/Mariehamn"
        | "Europe/Minsk"
        | "Europe/Monaco"
        | "Europe/Moscow"
        | "Europe/Oslo"
        | "Europe/Paris"
        | "Europe/Podgorica"
        | "Europe/Prague"
        | "Europe/Riga"
        | "Europe/Rome"
        | "Europe/Samara"
        | "Europe/San_Marino"
        | "Europe/Sarajevo"
        | "Europe/Saratov"
        | "Europe/Simferopol"
        | "Europe/Skopje"
        | "Europe/Sofia"
        | "Europe/Stockholm"
        | "Europe/Tallinn"
        | "Europe/Tirane"
        | "Europe/Ulyanovsk"
        | "Europe/Uzhgorod"
        | "Europe/Vaduz"
        | "Europe/Vatican"
        | "Europe/Vienna"
        | "Europe/Vilnius"
        | "Europe/Volgograd"
        | "Europe/Warsaw"
        | "Europe/Zagreb"
        | "Europe/Zaporozhye"
        | "Europe/Zurich"
        | "GMT"
        | "Indian/Antananarivo"
        | "Indian/Chagos"
        | "Indian/Christmas"
        | "Indian/Cocos"
        | "Indian/Comoro"
        | "Indian/Kerguelen"
        | "Indian/Mahe"
        | "Indian/Maldives"
        | "Indian/Mauritius"
        | "Indian/Mayotte"
        | "Indian/Reunion"
        | "Pacific/Apia"
        | "Pacific/Auckland"
        | "Pacific/Bougainville"
        | "Pacific/Chatham"
        | "Pacific/Chuuk"
        | "Pacific/Easter"
        | "Pacific/Efate"
        | "Pacific/Enderbury"
        | "Pacific/Fakaofo"
        | "Pacific/Fiji"
        | "Pacific/Funafuti"
        | "Pacific/Galapagos"
        | "Pacific/Gambier"
        | "Pacific/Guadalcanal"
        | "Pacific/Guam"
        | "Pacific/Honolulu"
        | "Pacific/Kiritimati"
        | "Pacific/Kosrae"
        | "Pacific/Kwajalein"
        | "Pacific/Majuro"
        | "Pacific/Marquesas"
        | "Pacific/Midway"
        | "Pacific/Nauru"
        | "Pacific/Niue"
        | "Pacific/Norfolk"
        | "Pacific/Noumea"
        | "Pacific/Pago_Pago"
        | "Pacific/Palau"
        | "Pacific/Pitcairn"
        | "Pacific/Pohnpei"
        | "Pacific/Port_Moresby"
        | "Pacific/Rarotonga"
        | "Pacific/Saipan"
        | "Pacific/Tahiti"
        | "Pacific/Tarawa"
        | "Pacific/Tongatapu"
        | "Pacific/Wake"
        | "Pacific/Wallis"
        | "US/Alaska"
        | "US/Arizona"
        | "US/Central"
        | "US/Eastern"
        | "US/Hawaii"
        | "US/Mountain"
        | "US/Pacific"
        | "UTC";
      result: components["schemas"]["TrendResult"][];
    };
    UserBasic: {
      id?: number;
      /** Format: uuid */
      uuid?: string;
      distinct_id?: string | null;
      first_name?: string;
      /**
       * Email address
       * Format: email
       */
      email: string;
    };
  };
}

export interface operations {
  domains_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedOrganizationDomainList"];
        };
      };
    };
  };
  domains_create: {
    parameters: {
      path: {
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["OrganizationDomain"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationDomain"];
        "application/x-www-form-urlencoded": components["schemas"]["OrganizationDomain"];
        "multipart/form-data": components["schemas"]["OrganizationDomain"];
      };
    };
  };
  domains_retrieve: {
    parameters: {
      path: {
        /** A UUID string identifying this domain. */
        id: string;
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationDomain"];
        };
      };
    };
  };
  domains_update: {
    parameters: {
      path: {
        /** A UUID string identifying this domain. */
        id: string;
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationDomain"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationDomain"];
        "application/x-www-form-urlencoded": components["schemas"]["OrganizationDomain"];
        "multipart/form-data": components["schemas"]["OrganizationDomain"];
      };
    };
  };
  domains_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this domain. */
        id: string;
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  domains_partial_update: {
    parameters: {
      path: {
        /** A UUID string identifying this domain. */
        id: string;
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationDomain"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedOrganizationDomain"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedOrganizationDomain"];
        "multipart/form-data": components["schemas"]["PatchedOrganizationDomain"];
      };
    };
  };
  domains_verify_create: {
    parameters: {
      path: {
        /** A UUID string identifying this domain. */
        id: string;
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationDomain"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationDomain"];
        "application/x-www-form-urlencoded": components["schemas"]["OrganizationDomain"];
        "multipart/form-data": components["schemas"]["OrganizationDomain"];
      };
    };
  };
  invites_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedOrganizationInviteList"];
        };
      };
    };
  };
  invites_create: {
    parameters: {
      path: {
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["OrganizationInvite"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationInvite"];
        "application/x-www-form-urlencoded": components["schemas"]["OrganizationInvite"];
        "multipart/form-data": components["schemas"]["OrganizationInvite"];
      };
    };
  };
  invites_destroy: {
    parameters: {
      path: {
        /** A UUID string identifying this organization invite. */
        id: string;
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  invites_bulk_create: {
    parameters: {
      path: {
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationInvite"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationInvite"];
        "application/x-www-form-urlencoded": components["schemas"]["OrganizationInvite"];
        "multipart/form-data": components["schemas"]["OrganizationInvite"];
      };
    };
  };
  members_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedOrganizationMemberList"];
        };
      };
    };
  };
  members_update: {
    parameters: {
      path: {
        parent_lookup_organization_id: string;
        user__uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationMember"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationMember"];
        "application/x-www-form-urlencoded": components["schemas"]["OrganizationMember"];
        "multipart/form-data": components["schemas"]["OrganizationMember"];
      };
    };
  };
  members_destroy: {
    parameters: {
      path: {
        parent_lookup_organization_id: string;
        user__uuid: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  members_partial_update: {
    parameters: {
      path: {
        parent_lookup_organization_id: string;
        user__uuid: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["OrganizationMember"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedOrganizationMember"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedOrganizationMember"];
        "multipart/form-data": components["schemas"]["PatchedOrganizationMember"];
      };
    };
  };
  plugins_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPluginList"];
        };
      };
    };
  };
  plugins_create: {
    parameters: {
      path: {
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
  };
  plugins_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin. */
        id: number;
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin. */
        id: number;
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
  };
  plugins_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin. */
        id: number;
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  plugins_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin. */
        id: number;
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedPlugin"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlugin"];
        "multipart/form-data": components["schemas"]["PatchedPlugin"];
      };
    };
  };
  plugins_check_for_updates_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin. */
        id: number;
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_source_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin. */
        id: number;
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_update_source_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin. */
        id: number;
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedPlugin"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPlugin"];
        "multipart/form-data": components["schemas"]["PatchedPlugin"];
      };
    };
  };
  plugins_upgrade_create: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin. */
        id: number;
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Plugin"];
        "application/x-www-form-urlencoded": components["schemas"]["Plugin"];
        "multipart/form-data": components["schemas"]["Plugin"];
      };
    };
  };
  plugins_activity_retrieve: {
    parameters: {
      path: {
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  plugins_repository_retrieve: {
    parameters: {
      path: {
        parent_lookup_organization_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Plugin"];
        };
      };
    };
  };
  /** Projects for the current organization. */
  list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedTeamBasicList"];
        };
      };
    };
  };
  /** Projects for the current organization. */
  create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Team"];
        "application/x-www-form-urlencoded": components["schemas"]["Team"];
        "multipart/form-data": components["schemas"]["Team"];
      };
    };
  };
  /** Projects for the current organization. */
  retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this team. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
  };
  /** Projects for the current organization. */
  update: {
    parameters: {
      path: {
        /** A unique integer value identifying this team. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Team"];
        "application/x-www-form-urlencoded": components["schemas"]["Team"];
        "multipart/form-data": components["schemas"]["Team"];
      };
    };
  };
  /** Projects for the current organization. */
  destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this team. */
        id: number;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  /** Projects for the current organization. */
  partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this team. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedTeam"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTeam"];
        "multipart/form-data": components["schemas"]["PatchedTeam"];
      };
    };
  };
  /** Projects for the current organization. */
  reset_token_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this team. */
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedTeam"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedTeam"];
        "multipart/form-data": components["schemas"]["PatchedTeam"];
      };
    };
  };
  actions_list: {
    parameters: {
      query: {
        format?: "csv" | "json";
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedActionList"];
          "text/csv": components["schemas"]["PaginatedActionList"];
        };
      };
    };
  };
  actions_create: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Action"];
          "text/csv": components["schemas"]["Action"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Action"];
        "application/x-www-form-urlencoded": components["schemas"]["Action"];
        "multipart/form-data": components["schemas"]["Action"];
      };
    };
  };
  actions_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this action. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Action"];
          "text/csv": components["schemas"]["Action"];
        };
      };
    };
  };
  actions_update: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this action. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Action"];
          "text/csv": components["schemas"]["Action"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Action"];
        "application/x-www-form-urlencoded": components["schemas"]["Action"];
        "multipart/form-data": components["schemas"]["Action"];
      };
    };
  };
  /** Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  actions_destroy: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this action. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      405: unknown;
    };
  };
  actions_partial_update: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this action. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Action"];
          "text/csv": components["schemas"]["Action"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedAction"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedAction"];
        "multipart/form-data": components["schemas"]["PatchedAction"];
      };
    };
  };
  actions_count_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this action. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Action"];
          "text/csv": components["schemas"]["Action"];
        };
      };
    };
  };
  actions_people_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Action"];
          "text/csv": components["schemas"]["Action"];
        };
      };
    };
  };
  activity_log_bookmark_activity_notification_create: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ActivityLog"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivityLog"];
        "application/x-www-form-urlencoded": components["schemas"]["ActivityLog"];
        "multipart/form-data": components["schemas"]["ActivityLog"];
      };
    };
  };
  activity_log_important_changes_retrieve: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ActivityLog"];
        };
      };
    };
  };
  /** Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
  annotations_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
        /** A search term. */
        search?: string;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedAnnotationList"];
        };
      };
    };
  };
  /** Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
  annotations_create: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Annotation"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Annotation"];
        "application/x-www-form-urlencoded": components["schemas"]["Annotation"];
        "multipart/form-data": components["schemas"]["Annotation"];
      };
    };
  };
  /** Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
  annotations_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this annotation. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Annotation"];
        };
      };
    };
  };
  /** Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
  annotations_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this annotation. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Annotation"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Annotation"];
        "application/x-www-form-urlencoded": components["schemas"]["Annotation"];
        "multipart/form-data": components["schemas"]["Annotation"];
      };
    };
  };
  /** Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  annotations_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this annotation. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      405: unknown;
    };
  };
  /** Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations. */
  annotations_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this annotation. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Annotation"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedAnnotation"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedAnnotation"];
        "multipart/form-data": components["schemas"]["PatchedAnnotation"];
      };
    };
  };
  app_metrics_historical_exports_retrieve: {
    parameters: {
      path: {
        parent_lookup_plugin_config_id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  app_metrics_historical_exports_retrieve_2: {
    parameters: {
      path: {
        id: string;
        parent_lookup_plugin_config_id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  app_metrics_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin config. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  app_metrics_error_details_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin config. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  cohorts_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedCohortList"];
        };
      };
    };
  };
  cohorts_create: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Cohort"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Cohort"];
        "application/x-www-form-urlencoded": components["schemas"]["Cohort"];
        "multipart/form-data": components["schemas"]["Cohort"];
      };
    };
  };
  cohorts_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this cohort. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Cohort"];
        };
      };
    };
  };
  cohorts_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this cohort. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Cohort"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Cohort"];
        "application/x-www-form-urlencoded": components["schemas"]["Cohort"];
        "multipart/form-data": components["schemas"]["Cohort"];
      };
    };
  };
  /** Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  cohorts_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this cohort. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      405: unknown;
    };
  };
  cohorts_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this cohort. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Cohort"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedCohort"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedCohort"];
        "multipart/form-data": components["schemas"]["PatchedCohort"];
      };
    };
  };
  cohorts_persons_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this cohort. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Cohort"];
          "text/csv": components["schemas"]["Cohort"];
        };
      };
    };
  };
  dashboards_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDashboardList"];
        };
      };
    };
  };
  dashboards_create: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Dashboard"];
        "application/x-www-form-urlencoded": components["schemas"]["Dashboard"];
        "multipart/form-data": components["schemas"]["Dashboard"];
      };
    };
  };
  dashboards_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this dashboard. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
    };
  };
  dashboards_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this dashboard. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Dashboard"];
        "application/x-www-form-urlencoded": components["schemas"]["Dashboard"];
        "multipart/form-data": components["schemas"]["Dashboard"];
      };
    };
  };
  /** Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  dashboards_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this dashboard. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      405: unknown;
    };
  };
  dashboards_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this dashboard. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedDashboard"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDashboard"];
        "multipart/form-data": components["schemas"]["PatchedDashboard"];
      };
    };
  };
  dashboards_move_tile_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this dashboard. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedDashboard"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedDashboard"];
        "multipart/form-data": components["schemas"]["PatchedDashboard"];
      };
    };
  };
  event_definitions_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedEventDefinitionList"];
        };
      };
    };
  };
  event_definitions_retrieve: {
    parameters: {
      path: {
        id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EventDefinition"];
        };
      };
    };
  };
  event_definitions_update: {
    parameters: {
      path: {
        id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EventDefinition"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventDefinition"];
        "application/x-www-form-urlencoded": components["schemas"]["EventDefinition"];
        "multipart/form-data": components["schemas"]["EventDefinition"];
      };
    };
  };
  event_definitions_partial_update: {
    parameters: {
      path: {
        id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EventDefinition"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedEventDefinition"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedEventDefinition"];
        "multipart/form-data": components["schemas"]["PatchedEventDefinition"];
      };
    };
  };
  events_list: {
    parameters: {
      query: {
        /** Only return events with a timestamp after this time. */
        after?: string;
        /** Only return events with a timestamp before this time. */
        before?: string;
        /** Filter list by distinct id. */
        distinct_id?: number;
        /** Filter list by event. For example `user sign up` or `$pageview`. */
        event?: string;
        format?: "csv" | "json";
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
        /** Filter list by person id. */
        person_id?: number;
        /** Filter events by event property, person property, cohort, groups and more. */
        properties?: components["schemas"]["Property"][];
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedClickhouseEventList"];
          "text/csv": components["schemas"]["PaginatedClickhouseEventList"];
        };
      };
    };
  };
  events_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClickhouseEvent"];
          "text/csv": components["schemas"]["ClickhouseEvent"];
        };
      };
    };
  };
  events_values_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClickhouseEvent"];
          "text/csv": components["schemas"]["ClickhouseEvent"];
        };
      };
    };
  };
  experiments_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedExperimentList"];
        };
      };
    };
  };
  experiments_create: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Experiment"];
        "application/x-www-form-urlencoded": components["schemas"]["Experiment"];
        "multipart/form-data": components["schemas"]["Experiment"];
      };
    };
  };
  experiments_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this experiment. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
    };
  };
  experiments_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this experiment. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Experiment"];
        "application/x-www-form-urlencoded": components["schemas"]["Experiment"];
        "multipart/form-data": components["schemas"]["Experiment"];
      };
    };
  };
  experiments_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this experiment. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  experiments_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this experiment. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedExperiment"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedExperiment"];
        "multipart/form-data": components["schemas"]["PatchedExperiment"];
      };
    };
  };
  experiments_results_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this experiment. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
    };
  };
  experiments_secondary_results_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this experiment. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
    };
  };
  experiments_requires_flag_implementation_retrieve: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Experiment"];
        };
      };
    };
  };
  exports_create: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ExportedAsset"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportedAsset"];
        "application/x-www-form-urlencoded": components["schemas"]["ExportedAsset"];
        "multipart/form-data": components["schemas"]["ExportedAsset"];
      };
    };
  };
  exports_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this exported asset. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExportedAsset"];
        };
      };
    };
  };
  exports_content_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this exported asset. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExportedAsset"];
        };
      };
    };
  };
  /**
   * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedFeatureFlagList"];
        };
      };
    };
  };
  /**
   * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_create: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureFlag"];
        "application/x-www-form-urlencoded": components["schemas"]["FeatureFlag"];
        "multipart/form-data": components["schemas"]["FeatureFlag"];
      };
    };
  };
  /**
   * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this feature flag. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /**
   * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this feature flag. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeatureFlag"];
        "application/x-www-form-urlencoded": components["schemas"]["FeatureFlag"];
        "multipart/form-data": components["schemas"]["FeatureFlag"];
      };
    };
  };
  /** Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  feature_flags_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this feature flag. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      405: unknown;
    };
  };
  /**
   * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this feature flag. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedFeatureFlag"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedFeatureFlag"];
        "multipart/form-data": components["schemas"]["PatchedFeatureFlag"];
      };
    };
  };
  /**
   * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_activity_retrieve_2: {
    parameters: {
      path: {
        /** A unique integer value identifying this feature flag. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /**
   * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_activity_retrieve: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /**
   * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_evaluation_reasons_retrieve: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /**
   * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_local_evaluation_retrieve: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  /**
   * Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.
   *
   * If you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.
   */
  feature_flags_my_flags_retrieve: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FeatureFlag"];
        };
      };
    };
  };
  groups_list: {
    parameters: {
      query: {
        /** The pagination cursor value. */
        cursor?: number;
        /** Specify the group type to list */
        group_type_index: number;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedGroupList"];
        };
      };
    };
  };
  groups_find_retrieve: {
    parameters: {
      query: {
        /** Specify the key of the group to find */
        group_key: string;
        /** Specify the group type to find */
        group_type_index: number;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
    };
  };
  groups_property_definitions_retrieve: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
    };
  };
  groups_property_values_retrieve: {
    parameters: {
      query: {
        /** Specify the group type to find property values of */
        group_type_index: number;
        /** Specify the property key to find values for */
        key: string;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
    };
  };
  groups_related_retrieve: {
    parameters: {
      query: {
        /** Specify the group type to find */
        group_type_index: number;
        /** Specify the id of the user to find groups for */
        id: string;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
    };
  };
  groups_types_list: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupType"][];
        };
      };
    };
  };
  groups_types_update_metadata_partial_update: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["GroupType"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedGroupType"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedGroupType"];
        "multipart/form-data": components["schemas"]["PatchedGroupType"];
      };
    };
  };
  /** Retrieve, create, update or destroy REST hooks. */
  hooks_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedHookList"];
        };
      };
    };
  };
  /** Retrieve, create, update or destroy REST hooks. */
  hooks_create: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Hook"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Hook"];
        "application/x-www-form-urlencoded": components["schemas"]["Hook"];
        "multipart/form-data": components["schemas"]["Hook"];
      };
    };
  };
  /** Retrieve, create, update or destroy REST hooks. */
  hooks_retrieve: {
    parameters: {
      path: {
        /** A unique value identifying this hook. */
        id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Hook"];
        };
      };
    };
  };
  /** Retrieve, create, update or destroy REST hooks. */
  hooks_update: {
    parameters: {
      path: {
        /** A unique value identifying this hook. */
        id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Hook"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Hook"];
        "application/x-www-form-urlencoded": components["schemas"]["Hook"];
        "multipart/form-data": components["schemas"]["Hook"];
      };
    };
  };
  /** Retrieve, create, update or destroy REST hooks. */
  hooks_destroy: {
    parameters: {
      path: {
        /** A unique value identifying this hook. */
        id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  /** Retrieve, create, update or destroy REST hooks. */
  hooks_partial_update: {
    parameters: {
      path: {
        /** A unique value identifying this hook. */
        id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Hook"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedHook"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedHook"];
        "multipart/form-data": components["schemas"]["PatchedHook"];
      };
    };
  };
  ingestion_warnings_retrieve: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  insights_list: {
    parameters: {
      query: {
        created_by?: number;
        format?: "csv" | "json";
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
        short_id?: string;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedInsightList"];
          "text/csv": components["schemas"]["PaginatedInsightList"];
        };
      };
    };
  };
  insights_create: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Insight"];
        "application/x-www-form-urlencoded": components["schemas"]["Insight"];
        "multipart/form-data": components["schemas"]["Insight"];
      };
    };
  };
  /**
   * When loading an insight for a dashboard pass a `from_dashboard` query parameter containing the dashboard ID
   *
   * e.g. `"/api/projects/{team_id}/insights/{insight_id}?from_dashboard={dashboard_id}"`
   *
   * Insights can be added to more than one dashboard, this allows the insight to be loaded in the correct context.
   *
   * Using the correct cache and enriching the response with dashboard specific config (e.g. layouts or colors)
   *
   * To improve UI responsiveness if there is not already a result cached the insight is returned without a result.
   * This allows the UI to render and then request the result separately.
   *
   * To ensure the result is calculated and returned include a `refresh=true` query parameter.
   */
  insights_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this insight. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_update: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this insight. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Insight"];
        "application/x-www-form-urlencoded": components["schemas"]["Insight"];
        "multipart/form-data": components["schemas"]["Insight"];
      };
    };
  };
  /** Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  insights_destroy: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this insight. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      405: unknown;
    };
  };
  insights_partial_update: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this insight. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedInsight"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedInsight"];
        "multipart/form-data": components["schemas"]["PatchedInsight"];
      };
    };
  };
  insights_activity_retrieve_2: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this insight. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_viewed_create: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this insight. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Insight"];
        "application/x-www-form-urlencoded": components["schemas"]["Insight"];
        "multipart/form-data": components["schemas"]["Insight"];
      };
    };
  };
  insights_activity_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_cancel_create: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Insight"];
        "application/x-www-form-urlencoded": components["schemas"]["Insight"];
        "multipart/form-data": components["schemas"]["Insight"];
      };
    };
  };
  insights_funnel_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  Funnels: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** Note, if funnel_viz_type is set the response will be different. */
      200: {
        content: {
          "application/json": components["schemas"]["FunnelStepsResults"];
          "text/csv": components["schemas"]["FunnelStepsResults"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Funnel"];
        "application/x-www-form-urlencoded": components["schemas"]["Funnel"];
        "multipart/form-data": components["schemas"]["Funnel"];
      };
    };
  };
  insights_funnel_correlation_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_funnel_correlation_create: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Insight"];
        "application/x-www-form-urlencoded": components["schemas"]["Insight"];
        "multipart/form-data": components["schemas"]["Insight"];
      };
    };
  };
  insights_path_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_path_create: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Insight"];
        "application/x-www-form-urlencoded": components["schemas"]["Insight"];
        "multipart/form-data": components["schemas"]["Insight"];
      };
    };
  };
  insights_retention_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  insights_trend_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Insight"];
          "text/csv": components["schemas"]["Insight"];
        };
      };
    };
  };
  Trends: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TrendResults"];
          "text/csv": components["schemas"]["TrendResults"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Trend"];
        "application/x-www-form-urlencoded": components["schemas"]["Trend"];
        "multipart/form-data": components["schemas"]["Trend"];
      };
    };
  };
  integrations_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedIntegrationList"];
        };
      };
    };
  };
  integrations_create: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Integration"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Integration"];
        "application/x-www-form-urlencoded": components["schemas"]["Integration"];
        "multipart/form-data": components["schemas"]["Integration"];
      };
    };
  };
  integrations_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this integration. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Integration"];
        };
      };
    };
  };
  integrations_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this integration. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  integrations_channels_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this integration. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Integration"];
        };
      };
    };
  };
  persons_list: {
    parameters: {
      query: {
        /** Filter list by distinct id. */
        distinct_id?: number;
        /** Filter persons by email (exact match) */
        email?: string;
        format?: "csv" | "json";
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
        /** Filter Persons by person properties. */
        properties?: components["schemas"]["Property"][];
        /** Search persons, either by email (full text search) or distinct_id (exact match). */
        search?: string;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPersonList"];
          "text/csv": components["schemas"]["PaginatedPersonList"];
        };
      };
    };
  };
  persons_create: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Person"];
        "application/x-www-form-urlencoded": components["schemas"]["Person"];
        "multipart/form-data": components["schemas"]["Person"];
      };
    };
  };
  persons_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this person. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  /**
   * Only for setting properties on the person. "properties" from the request data will be updated via a "$set" event.
   * This means that only the properties listed will be updated, but other properties won't be removed nor updated.
   * If you would like to remove a property use the `delete_property` endpoint.
   */
  persons_update: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this person. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Person"];
        "application/x-www-form-urlencoded": components["schemas"]["Person"];
        "multipart/form-data": components["schemas"]["Person"];
      };
    };
  };
  persons_destroy: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this person. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  persons_partial_update: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this person. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedPerson"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPerson"];
        "multipart/form-data": components["schemas"]["PatchedPerson"];
      };
    };
  };
  persons_activity_retrieve_2: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this person. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  persons_delete_property_create: {
    parameters: {
      query: {
        /** Specify the property key to delete */
        $unset: string;
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this person. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Person"];
        "application/x-www-form-urlencoded": components["schemas"]["Person"];
        "multipart/form-data": components["schemas"]["Person"];
      };
    };
  };
  persons_split_create: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** A unique integer value identifying this person. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Person"];
        "application/x-www-form-urlencoded": components["schemas"]["Person"];
        "multipart/form-data": components["schemas"]["Person"];
      };
    };
  };
  persons_update_property_create: {
    parameters: {
      query: {
        format?: "csv" | "json";
        /** Specify the property key */
        key: string;
        /** Specify the property value */
        value: unknown;
      };
      path: {
        /** A unique integer value identifying this person. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Person"];
        "application/x-www-form-urlencoded": components["schemas"]["Person"];
        "multipart/form-data": components["schemas"]["Person"];
      };
    };
  };
  persons_activity_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  persons_cohorts_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  persons_funnel_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  persons_funnel_create: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Person"];
        "application/x-www-form-urlencoded": components["schemas"]["Person"];
        "multipart/form-data": components["schemas"]["Person"];
      };
    };
  };
  persons_funnel_correlation_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  persons_funnel_correlation_create: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Person"];
        "application/x-www-form-urlencoded": components["schemas"]["Person"];
        "multipart/form-data": components["schemas"]["Person"];
      };
    };
  };
  persons_lifecycle_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  persons_path_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  persons_path_create: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Person"];
        "application/x-www-form-urlencoded": components["schemas"]["Person"];
        "multipart/form-data": components["schemas"]["Person"];
      };
    };
  };
  persons_properties_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  persons_retention_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  persons_stickiness_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  persons_trends_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  persons_values_retrieve: {
    parameters: {
      query: {
        format?: "csv" | "json";
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
          "text/csv": components["schemas"]["Person"];
        };
      };
    };
  };
  plugin_configs_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPluginConfigList"];
        };
      };
    };
  };
  plugin_configs_create: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
  };
  plugin_configs_logs_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        parent_lookup_plugin_config_id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPluginLogEntryList"];
        };
      };
    };
  };
  plugin_configs_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin config. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  plugin_configs_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin config. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
  };
  plugin_configs_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin config. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      204: never;
    };
  };
  plugin_configs_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin config. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedPluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPluginConfig"];
        "multipart/form-data": components["schemas"]["PatchedPluginConfig"];
      };
    };
  };
  plugin_configs_frontend_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin config. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
  };
  plugin_configs_job_create: {
    parameters: {
      path: {
        /** A unique integer value identifying this plugin config. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PluginConfig"];
        "multipart/form-data": components["schemas"]["PluginConfig"];
      };
    };
  };
  plugin_configs_rearrange_partial_update: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PluginConfig"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedPluginConfig"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPluginConfig"];
        "multipart/form-data": components["schemas"]["PatchedPluginConfig"];
      };
    };
  };
  property_definitions_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedPropertyDefinitionList"];
        };
      };
    };
  };
  property_definitions_retrieve: {
    parameters: {
      path: {
        id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PropertyDefinition"];
        };
      };
    };
  };
  property_definitions_update: {
    parameters: {
      path: {
        id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PropertyDefinition"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PropertyDefinition"];
        "application/x-www-form-urlencoded": components["schemas"]["PropertyDefinition"];
        "multipart/form-data": components["schemas"]["PropertyDefinition"];
      };
    };
  };
  property_definitions_partial_update: {
    parameters: {
      path: {
        id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PropertyDefinition"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedPropertyDefinition"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPropertyDefinition"];
        "multipart/form-data": components["schemas"]["PatchedPropertyDefinition"];
      };
    };
  };
  session_recordings_retrieve: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  session_recordings_retrieve_2: {
    parameters: {
      path: {
        id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  session_recordings_snapshots_retrieve: {
    parameters: {
      path: {
        id: string;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  session_recordings_properties_retrieve: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      200: unknown;
    };
  };
  subscriptions_list: {
    parameters: {
      query: {
        /** Number of results to return per page. */
        limit?: number;
        /** The initial index from which to return the results. */
        offset?: number;
      };
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedSubscriptionList"];
        };
      };
    };
  };
  subscriptions_create: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Subscription"];
        "application/x-www-form-urlencoded": components["schemas"]["Subscription"];
        "multipart/form-data": components["schemas"]["Subscription"];
      };
    };
  };
  subscriptions_retrieve: {
    parameters: {
      path: {
        /** A unique integer value identifying this subscription. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
  };
  subscriptions_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this subscription. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Subscription"];
        "application/x-www-form-urlencoded": components["schemas"]["Subscription"];
        "multipart/form-data": components["schemas"]["Subscription"];
      };
    };
  };
  /** Hard delete of this model is not allowed. Use a patch API call to set "deleted" to true */
  subscriptions_destroy: {
    parameters: {
      path: {
        /** A unique integer value identifying this subscription. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      405: unknown;
    };
  };
  subscriptions_partial_update: {
    parameters: {
      path: {
        /** A unique integer value identifying this subscription. */
        id: number;
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Subscription"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedSubscription"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedSubscription"];
        "multipart/form-data": components["schemas"]["PatchedSubscription"];
      };
    };
  };
  /**
   * When object storage is available this API allows upload of media which can be used, for example, in text cards on dashboards.
   *
   *     Uploaded media must have a content type beginning with 'image/' and be less than 4MB.
   */
  uploaded_media_create: {
    parameters: {
      path: {
        /** Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/. */
        project_id: string;
      };
    };
    responses: {
      /** No response body */
      201: unknown;
    };
  };
  /** Create, read, update and delete prompt sequences state for a person. */
  prompts_my_prompts_partial_update: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PromptSequenceState"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PatchedPromptSequenceState"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedPromptSequenceState"];
        "multipart/form-data": components["schemas"]["PatchedPromptSequenceState"];
      };
    };
  };
}

export interface external {}
